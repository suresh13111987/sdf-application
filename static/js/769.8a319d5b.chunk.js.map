{"version":3,"file":"static/js/769.8a319d5b.chunk.js","mappings":"4TAuGA,EA/FkC,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACnC,GAAoBC,EAAAA,EAAAA,KAAZC,EAAR,EAAQA,EAAGC,EAAX,EAAWA,KAIX,OAHAC,EAAAA,EAAAA,YAAU,WACRD,EAAKE,eAAeC,OAAOC,eAAeC,QAAQ,YACnD,GAAE,KAED,+BACE,SAACC,EAAA,EAAD,WACE,UAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,UAAU,gBAA/B,WACE,gBAAKA,UAAU,yBAAf,SACGX,EAAE,2BAEL,UAACO,EAAA,EAAD,CAAKI,UAAU,wBAAf,WACE,UAACH,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,UAAU,OAA7B,WACE,SAACJ,EAAA,EAAD,CAAKI,UAAU,cAAf,UACE,SAACH,EAAA,EAAD,CACEC,GAAI,GACJC,GAAI,GACJC,UAAU,oCAHZ,SAKU,OAAPb,QAAO,IAAPA,GAAAA,EAASc,cACNC,EAAAA,EAAAA,IAAgB,OAACf,QAAD,IAACA,OAAD,EAACA,EAASc,cAC1B,OAGR,SAACL,EAAA,EAAD,CAAKI,UAAU,kBAAf,UACE,UAACH,EAAA,EAAD,CAAKG,UAAU,yBAAf,qBACM,IAAIG,MAAOC,cAAgB,GADjC,mBAMJ,UAACP,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,UAAU,OAA7B,WACE,SAACJ,EAAA,EAAD,CAAKI,UAAU,cAAf,UACE,SAACH,EAAA,EAAD,CACEC,GAAI,GACJC,GAAI,GACJC,UAAU,oCAHZ,SAKU,OAAPb,QAAO,IAAPA,GAAAA,EAASkB,YACNH,EAAAA,EAAAA,IAAgB,OAACf,QAAD,IAACA,OAAD,EAACA,EAASkB,YAC1B,OAGR,SAACT,EAAA,EAAD,CAAKI,UAAU,kBAAf,UACE,UAACH,EAAA,EAAD,CAAKG,UAAU,yBAAf,qBACM,IAAIG,MAAOC,eADjB,mBAMJ,UAACP,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,UAAU,OAA7B,WACE,SAACJ,EAAA,EAAD,CAAKI,UAAU,cAAf,UACE,SAACH,EAAA,EAAD,CACEC,GAAI,GACJC,GAAI,GACJC,UAAU,oCAHZ,SAKU,OAAPb,QAAO,IAAPA,GAAAA,EAASmB,UAAWJ,EAAAA,EAAAA,IAAgB,OAACf,QAAD,IAACA,OAAD,EAACA,EAASmB,UAAY,OAG/D,SAACV,EAAA,EAAD,CAAKI,UAAU,kBAAf,UACE,UAACH,EAAA,EAAD,CAAKG,UAAU,yBAAf,qBACM,IAAIG,MAAOC,cAAgB,GADjC,2BAgCf,E,yECpFYG,EAAc,SAACC,GAC1B,OAAoBpB,EAAAA,EAAAA,KAAZC,EAAR,EAAQA,EAAGC,EAAX,EAAWA,KACHmB,EAA8BD,EAA9BC,SAAUC,EAAoBF,EAApBE,gBACZC,GAAWC,EAAAA,EAAAA,OACjBrB,EAAAA,EAAAA,YAAU,WACRD,EAAKE,eAAeC,OAAOC,eAAeC,QAAQ,YACnD,GAAE,IAEH,IAAQkB,EACNH,EADMG,gBACNH,EADuBI,uBACvBJ,EAD+CK,qBAuBjD,OACE,+BACE,gBAAKf,UAAU,kBAAf,UACE,SAACJ,EAAA,EAAD,CAAKI,UAAU,4BAAf,UACE,SAACH,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAjB,UACE,UAACH,EAAA,EAAD,CAAKI,UAAU,qBAAf,WACE,SAACH,EAAA,EAAD,CACEC,GAAI,EACJC,GAAI,EACJC,UAAU,8CAHZ,SAKGX,EAAE,mBAGL,SAACQ,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,UACE,UAACiB,EAAA,EAAD,CACEC,UAAU,aACVjB,UAAU,4CACVkB,IAAK,EAHP,WAKE,gBAAKlB,UAAW,kBAAhB,SACGX,EAAE,8BAEL,0BACE,SAAC,IAAD,CAGE8B,QAAS,IAAIhB,KAAKU,EAAgBO,qBAClCC,SAAUR,EAAgBS,gBAC1BC,SAjDG,SAACC,GACtB,cAAqBA,EAArB,GAAOC,EAAP,KAAcC,EAAd,KACAf,GAASgB,EAAAA,EAAAA,IAAuB,kBAAmBF,IACnDd,GAASgB,EAAAA,EAAAA,IAAuB,gBAAiBD,IAC7CA,GAEFf,GAASiB,EAAAA,EAAAA,IAAkB,iBAE9B,EA0CmBC,UAAWhB,EAAgBS,gBAC3BQ,QAASjB,EAAgBkB,cACzBC,cAAY,EACZC,QAAQ,EAERC,WAAW,WACXC,qBAAmB,EACnBC,qBAAmB,YAK3B,SAACvC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,UACE,UAACiB,EAAA,EAAD,CACEC,UAAU,aACVjB,UAAU,4CACVkB,IAAK,EAHP,WAKE,gBAAKlB,UAAW,kBAAhB,SACGX,EAAE,gCAEL,0BACE,SAAC,IAAD,CACEgD,QACE,IAAIlC,KAAKU,EAAgByB,yBAG3BjB,SAAUR,EAAgB0B,kBAC1BhB,SApEM,SAACC,GACzB,cAAqBA,EAArB,GAAOC,EAAP,KAAcC,EAAd,KACAf,GAASgB,EAAAA,EAAAA,IAAuB,oBAAqBF,IACrDd,GAASgB,EAAAA,EAAAA,IAAuB,kBAAmBD,IAC/CA,GAEFf,GAASiB,EAAAA,EAAAA,IAAkB,mBAE9B,EA6DmBC,UAAWhB,EAAgB0B,kBAC3BT,QAASjB,EAAgB2B,gBACzBR,cAAY,EACZC,QAAQ,EAERC,WAAW,WACXC,qBAAmB,YAK3B,SAACtC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,UACE,UAACiB,EAAA,EAAD,CACEC,UAAU,aACVjB,UAAU,4CACVkB,IAAK,EAHP,WAKE,gBAAKlB,UAAW,kBAAhB,SAAoCX,EAAE,gBACtC,gBAAKoD,MAAO,CAAEC,WAAY,KAA1B,SAAkCjC,mBASnD,E,wBCpIakC,EADsBC,EAAAA,GAAAA,yBACEA,EAAAA,GAAAA,O,gGCgBzBC,EAAuB,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,eACrC,GADuE,EAAlBC,aACjC3D,EAAAA,EAAAA,MAAZC,EAAR,EAAQA,EAAGC,EAAX,EAAWA,MACXC,EAAAA,EAAAA,YAAU,WACRD,EAAKE,eAAeC,OAAOC,eAAeC,QAAQ,YACnD,GAAE,IAEH,OAAkCqD,EAAAA,EAAAA,UAASF,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,MAEA3D,EAAAA,EAAAA,YAAU,WACR,GAAIuD,EAAeK,OAAQ,CACzB,IAAMC,GAAOC,EAAAA,EAAAA,WAAUP,GACjBQ,GAAa,OAAIF,GACpBG,KAAI,SAACC,GACJ,OAAOC,OAAOC,KAAKF,GAChBG,QAAO,SAACC,GAAD,MAAa,SAANA,GAAsB,UAANA,CAAvB,IACPC,QAAO,SAACC,EAAKC,GACZ,MAAM,GAAN,eACKD,GADL,CAEE,CACEE,KAAMD,EACNE,MAAkC,IAA3BC,WAAWV,EAAKO,IAAe,KAAOP,EAAKO,GAClDI,KAAI,OAAEX,QAAF,IAAEA,OAAF,EAAEA,EAAMW,OAGjB,GAAE,GACN,IACAC,OACGC,EAASZ,OAAOC,KAAKZ,EAAe,IACvCa,QAAO,SAACC,GAAD,MAAa,SAANA,GAAsB,UAANA,CAAvB,IACPL,KAAI,SAACe,GACJ,IAAMC,EAAWjB,EAAWkB,MAC1B,SAACC,GAAD,OAAQA,EAAGT,OAASM,GAA+B,iBAA1BG,EAAGN,KAAKO,aAAjC,IAEIC,EAAUrB,EAAWkB,MACzB,SAACC,GAAD,OAAQA,EAAGT,OAASM,GAA+B,kBAA1BG,EAAGN,KAAKO,aAAjC,IAEIE,EAActB,EAAWkB,MAC7B,SAACC,GAAD,OACEA,EAAGT,OAASM,GAA+B,0BAA1BG,EAAGN,KAAKO,aAD3B,IAGF,MAAO,CACLV,KAAMM,EACN,uBAAiBK,QAAjB,IAAiBA,OAAjB,EAAiBA,EAASV,MAC1B,sBAAgBM,QAAhB,IAAgBA,OAAhB,EAAgBA,EAAUN,MAC1B,+BAAyBW,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAaX,MAEzC,IAKHf,EASEmB,EAAOQ,MAAK,SAACC,EAAGC,GAAJ,OAAU,IAAI5E,KAAK2E,EAAEd,MAAQ,IAAI7D,KAAK4E,EAAEf,KAAxC,IASf,CACF,GAAE,CAAClB,IAEJ,IAIMkC,EAAa,CACjB,UACA,UACA,UACA,UACA,UACA,UACA,WAGF,OACE,+BAEE,UAACpF,EAAA,EAAD,CAAK6C,MAAO,CAAEwC,UAAW,OAAzB,WACE,SAACpF,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAjB,UACE,SAACiB,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,UACE,gBAAKlB,UAAU,kEAAf,SACGX,EAAE,2CAQT,SAACQ,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,UAAU,iBAA/B,UACE,SAACkF,EAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,IAA1C,UACE,UAACC,EAAA,EAAD,CACEF,MAAO,KACPG,GAAG,wBACHF,OAAQ,IACRG,KAAMtC,EACNuC,OAAQ,CACNC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,IAEVnD,MAAO,CACLoD,SAAU,QAZd,WAeE,SAACC,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,CAAOC,QAAQ,OAAOjG,UAAU,iBAChC,SAACkG,EAAA,EAAD,CAAOC,cAjDC,SAAClC,GACnB,OAAOA,EAAQ,GAChB,KAgDW,SAACmC,EAAA,EAAD,CAAeC,OAAO,OAAOC,gBAAgB,SAS7C,SAACC,EAAA,EAAD,CACEC,KAAK,WACLP,QAAS,gBACTI,OAAQrB,EAAW,MAErB,SAACuB,EAAA,EAAD,CACEC,KAAK,WACLP,QAAS,eACTI,OAAQrB,EAAW,MAGrB,SAACuB,EAAA,EAAD,CACEC,KAAK,WACLP,QAAS,wBACTI,OAAQrB,EAAW,gBAuClC,E,WCpJD,G,0BAnDkB,SAACxE,GACjB,IACEiG,EAQEjG,EARFiG,QACAC,EAOElG,EAPFkG,cACAC,EAMEnG,EANFmG,eACAC,EAKEpG,EALFoG,UACAC,EAIErG,EAJFqG,UACAC,EAGEtG,EAHFsG,iBACAC,EAEEvG,EAFFuG,YACAC,EACExG,EADFwG,YAEF,OACE,gBAAKhH,UAAU,6BAA6ByC,MAAOkE,EAAelE,MAAlE,UACE,SAAC,EAAAwE,aAAD,gBACER,QAASA,EAETC,cAAeA,GACXC,GAJN,IAKEO,sBAAoB,EACpBC,kBAAgB,EAChBC,qBAAmB,EACnBC,uBAAqB,EACrBC,yBAA0B,GAC1BC,YAAaV,EACbW,SAAU,IACVC,mBAAoBX,EAZtB,SAcGF,EAAUrD,KAAI,SAACmE,EAAGC,GAAJ,OAEb,SAAC,EAAAC,aAAD,CACEC,cAAed,EAEfe,mBAAiB,EACjBC,SAAU,IACVC,WAAU,OAAEN,QAAF,IAAEA,OAAF,EAAEA,EAAGO,MACfC,SAAU,SAACC,GAAY,IAAD,IACpB,QACE,OAACT,QAAD,IAACA,GAAAA,EAAGU,OACJV,EAAEzD,QAAU+C,GAC0B,2BAAhC,OAANmB,QAAM,IAANA,GAAA,UAAAA,EAAQ5C,YAAR,mBAAcpB,YAAd,eAAoBO,cAEvB,EACD2D,MAAK,OAAEX,QAAF,IAAEA,OAAF,EAAEA,EAAGzD,OAXL0D,EAJM,QAsBtB,GC1CYW,EAA0B,SAAC,GAAiB,IAAZC,EAAW,oBAEtD,GAAoBnJ,EAAAA,EAAAA,KAATE,GAAX,EAAQD,EAAR,EAAWC,MA0EX,OAzEAC,EAAAA,EAAAA,YAAU,WACRD,EAAKE,eAAeC,OAAOC,eAAeC,QAAQ,YACnD,GAAE,KAwED,SAACC,EAAA,EAAD,CAAKI,UAAU,cAAf,UACE,SAACH,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAjB,UACE,SAAC,GAAD,UAAewI,OAwFtB,E,4CC9KKC,EAAW,SAAChI,GAChB,OAAIA,EAAMiI,gBAEN,SAAC,MAAD,kBACMjI,GADN,IAEEkI,QAAO,CAAGlI,EAAMmI,WAAT,eAAuBnI,EAAMkI,UACpCnH,SAAU,SAACF,GACT,IAAMuH,EAAgBvH,EAASmD,MAAK,SAACkD,GAAD,MAAmB,MAAZA,EAAEzD,KAAT,IACpC,OAAK4E,EAAAA,EAAAA,SAAQD,GAGNpI,EAAMe,SAASF,GAFbb,EAAMe,SAASf,EAAMkI,QAG/B,MAKA,SAAC,MAAD,UAAiBlI,GACzB,EAEDgI,EAASM,aAAe,CACtBH,UAAW,CACTV,MAAO,gBACPhE,MAAO,MAIX,Q,iCCfA,EAbmB,SAAC,GAA2C,IAAzCyE,EAAwC,EAAxCA,QAASnH,EAA+B,EAA/BA,SAAU0C,EAAqB,EAArBA,MAAUsE,GAAW,YAC5D,OACE,SAAC,GAAD,QACEG,QAASA,EACTK,mBAAmB,EACnBC,qBAAqB,EACrBzH,SAAUA,EACV0C,MAAOA,GACHsE,GAGT,E,mICDYU,EAAgB,SAAC,GASvB,IARLC,EAQI,EARJA,mBACAC,EAOI,EAPJA,kBACAC,EAMI,EANJA,gBACAC,EAKI,EALJA,SACAC,EAII,EAJJA,aAEAC,GAEI,EAHJC,SAGI,EAFJD,mBACGhB,GACC,YACJ,GAAoBnJ,EAAAA,EAAAA,KAAZC,EAAR,EAAQA,EAAGC,EAAX,EAAWA,MACMmK,EAAAA,EAAAA,MAMjB,OAJAlK,EAAAA,EAAAA,YAAU,WACRD,EAAKE,eAAeC,OAAOC,eAAeC,QAAQ,YACnD,GAAE,KAGD,+BACE,UAACC,EAAA,EAAD,CAAKI,UAAU,OAAf,WACE,SAACH,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,UAAU,OAA/B,UACE,iBAAMA,UAAU,yBAAhB,SAA0CX,EAAE,uBAG9C,SAACQ,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,UAAU,OAA/B,UACE,UAACJ,EAAA,EAAD,CAAKI,UAAU,oBAAf,WACE,SAACH,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,UAAU,4BAA/B,SACGX,EAAE,mCAGL,UAAC2B,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,WACE,gBAAKuB,MAAO,CAAE0C,MAAO,QAArB,UACE,SAAC,GAAD,QACEuD,QAASgB,EAAAA,GAAAA,QAAoB,SAAChC,GAAD,OAAOA,EAAEU,IAAT,IAC7B7G,SAAU2H,EACVS,SAAO,EACPlB,gBAAc,GACVF,OAIR,gBAAKvI,UAAU,UAAf,UACE,SAAC4J,EAAA,EAAD,CACEC,SAAUN,EACVO,QAASV,EACTW,QAAQ,OACR/J,UAAU,aAJZ,SAMGX,EAAE,kBAKT,SAACQ,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAI0C,MAAO,CAAEwC,UAAW,OAAzC,UACE,UAACjE,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,WACE,gBAAKlB,UAAU,yBAAf,SAAyCX,EAAE,iBAC3C,gBAAKW,UAAU,UAAf,UACE,SAAC4J,EAAA,EAAD,CACEG,QAAQ,OACR/J,UAAU,aACVgK,KAAK,KACLH,UAAWtB,EAAK9B,QAAQtD,OACxB2G,QAAS,kBAAMvB,EAAK0B,WAAX,EALX,SAOG5K,EAAE,eAIP,0BACE,UAACuK,EAAA,EAAD,CACEG,QAAQ,OACR/J,UAAU,aACVgK,KAAK,KACLH,UAAWtB,EAAK9B,QAAQtD,OACxB2G,QAAO,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAM2B,KALjB,UAOG,IACA7K,EAAE,sBAIP,0BACE,UAACuK,EAAA,EAAD,CACEG,QAAQ,OACR/J,UAAU,aACVgK,KAAK,KACLH,UAAWtB,EAAK9B,QAAQtD,OACxB2G,QAAO,OAAEvB,QAAF,IAAEA,OAAF,EAAEA,EAAM4B,KALjB,UAOG,IACA9K,EAAE,sBAIP,0BACE,SAACuK,EAAA,EAAD,CACEG,QAAQ,OACR/J,UAAU,aACVgK,KAAK,KACLH,UACGtB,EAAK9B,QAAQtD,QACdoF,EAAK6B,qBAAuB7B,EAAK9B,QAAQtD,OAE3C2G,QAAS,kBAAMvB,EAAK8B,sBAAX,EARX,SAUGhL,EAAE,uBAMX,UAACQ,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAI0C,MAAO,CAAE6H,UAAW,QAAzC,WACE,SAAC,GAAD,UAAe/B,KAEf,UAAC3I,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,UAAU,OAA/B,UACE,UAACgB,EAAA,EAAD,CAAOC,UAAU,aAAaC,IAAK,EAAnC,WACE,0BACE,SAAC0I,EAAA,EAAD,CACEG,QAAQ,OACR/J,UAAU,aACVgK,KAAK,KACLF,QAAST,EAJX,SAMGhK,EAAE,qBAIP,0BACE,SAACuK,EAAA,EAAD,CACEG,QAAQ,OACR/J,UAAU,aACVgK,KAAK,KACLF,QAASR,EAJX,SAMGjK,EAAE,wBAIP,0BACE,SAACuK,EAAA,EAAD,CACEG,QAAQ,OACR/J,UAAU,aACVgK,KAAK,KACLF,QAASX,EAJX,SAMG9J,EAAE,qCAIP,0BACE,SAACuK,EAAA,EAAD,CACEC,UAAWtB,EAAK9B,QAAQtD,OACxB4G,QAAQ,OACR/J,UAAU,aACVgK,KAAK,KACLF,QAAS,kBAAMvB,EAAKgC,iBAAgB,EAA3B,EALX,SAOGlL,EAAE,qBAMX,SAACQ,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAjB,UACE,UAACH,EAAA,EAAD,CAAKI,UAAU,OAAf,WACE,SAACH,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,UAAU,yBAA/B,SACGX,EAAE,sBACD,IACAmL,IACE/K,OAAOC,eAAeC,QAAQ,iBAC5B,IAAIQ,MACNsK,aAGN,UAAC5K,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,UAAU,OAA/B,WACE,iBAAMA,UAAU,kBAAhB,mBACA,0BACGX,EACC,kLAuIzB,E,WCiBD,EAhUY,SAAC,GAA8D,IAA5DiE,EAA2D,EAA3DA,WAAYnE,EAA+C,EAA/CA,QAASuL,EAAsC,EAAtCA,SAAUvG,EAA4B,EAA5BA,KAAMtD,EAAsB,EAAtBA,gBAC5CF,GAAWC,EAAAA,EAAAA,MAajB,IADiB+J,EAAAA,EAAAA,OACGvL,EAAAA,EAAAA,MAAZC,EAAR,EAAQA,EAAGC,EAAX,EAAWA,KACLsL,EAAaC,OAAO1G,GAI1B,OAHA5E,EAAAA,EAAAA,YAAU,WACRD,EAAKE,eAAeC,OAAOC,eAAeC,QAAQ,YACnD,GAAE,KAED,iBAAKK,UAAU,kBAAf,WACE,gBAAKA,UAAU,MAAf,UACE,gBAAKA,UAAU,gBAAf,UAEE,iBAAMA,UAAU,kBAAhB,SAAmCX,EAAE,eAIzC,gBAAKW,UAAU,gCAAf,UACE,iBAAKA,UAAU,MAAf,WACE,gBAAKA,UAAU,wDAAf,SACGX,EAAE,oBAEL,gBAAKW,UAAU,6BAAf,UAEE,mBACEA,UACiB,QAAf4K,EACI,0CACA,gCAENd,QAAS,SAACpC,GACRA,EAAEoD,iBAQFnK,GACEoK,EAAAA,EAAAA,IAAwB,CACtBC,gBAAgB,EAChBC,UAAW,QAGftK,GACEuK,EAAAA,EAAAA,IAAmB,CACjBC,WAAYC,EAAAA,GACZjH,KAAM,QAGX,EA3BH,oBAgCF,gBAAKnE,UAAU,6BAAf,UAIE,mBACEA,UACiB,mBAAf4K,EACI,yCACA,gCAENd,QAAS,SAACpC,GACRA,EAAEoD,iBAUFnK,GACEoK,EAAAA,EAAAA,IAAwB,CACtBC,gBAAgB,EAChBC,UAAW,QAGftK,GACEuK,EAAAA,EAAAA,IAAmB,CACjBC,WAAYE,EAAAA,GACZlH,KAAM,mBAGX,EA7BH,2BAkCF,gBAAKnE,UAAU,6BAAf,UAIE,mBACEA,UACiB,kBAAf4K,EACI,yCACA,gCAENd,QAAS,SAACpC,GACRA,EAAEoD,iBAUFnK,GACEoK,EAAAA,EAAAA,IAAwB,CACtBC,gBAAgB,EAChBC,UAAW,QAGftK,GACEuK,EAAAA,EAAAA,IAAmB,CACjBC,YAAYG,EAAAA,EAAAA,IACVzK,EAAgBO,qBAElB+C,KAAM,kBAGX,EA/BH,gCAoCF,gBAAKnE,UAAU,6BAAf,UAQE,UAACuL,EAAA,UAAD,CACEC,GAAG,SACHxL,UAAU,qBACV,aAAW,sBACXuB,SAAU,SAACmG,GAAD,OA3JE,SAACA,GACvBA,EAAEoD,iBACF,IAAMJ,EAAWhD,EAAE+D,OAAOxH,MAC1BtD,GACEoK,EAAAA,EAAAA,IAAwB,CACtBC,gBAAgB,EAChBC,UAAW,QAGftK,GAASuK,EAAAA,EAAAA,IAAmB,CAAER,SAAAA,IAC/B,CAiJ4BgB,CAAgBhE,EAAvB,EACVzD,MAAOyG,EALT,WAOE,mBAAQzG,MAAM,MAAd,2BACA,mBAAQA,MAAM,KAAd,oCAMR,UAACrE,EAAA,EAAD,CAAKI,UAAU,OAAf,WACE,SAACH,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,UAAU,+BAA7B,UACE,iBAAKA,UAAU,gBAAgByC,MAAO,CAAE2C,OAAQ,UAAhD,WACE,UAACxF,EAAA,EAAD,CAAKI,UAAU,yBAAf,WACE,SAACH,EAAA,EAAD,CACE8L,GAAI,EACJ7L,GAAI,EACJC,GAAI,EACJC,UAAU,gCAJZ,qBASA,SAACH,EAAA,EAAD,CACE8L,GAAI,EACJ7L,GAAI,EACJC,GAAI,EACJC,UAAU,8CAJZ,mBAMMwK,IAAM,OAAC3J,QAAD,IAACA,OAAD,EAACA,EAAiBS,iBAAiBsK,OAC3C,WAPJ,eAQUpB,IAAM,OAAC3J,QAAD,IAACA,OAAD,EAACA,EAAiBkB,eAAe6J,OAC7C,kBAKN,SAAChM,EAAA,EAAD,CAAKI,UAAU,aAAf,UACE,UAACH,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,UAAU,wBAA/B,WACE,gBAAKA,UAAU,uBAAf,SACa,OAAVsD,QAAU,IAAVA,GAAAA,EAAYuI,mBACT3L,EAAAA,EAAAA,IAAgB,OAACoD,QAAD,IAACA,OAAD,EAACA,EAAYuI,mBAC7B,KAEN,gBAAK7L,UAAU,uBAAf,SAAuCX,EAAE,8BAMjD,SAACQ,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,UAAU,2BAA7B,UACE,iBAAKA,UAAU,gBAAgByC,MAAO,CAAE2C,OAAQ,UAAhD,WACE,UAACxF,EAAA,EAAD,CAAKI,UAAU,yBAAf,WACE,SAACH,EAAA,EAAD,CACE8L,GAAI,EACJ7L,GAAI,EACJC,GAAI,EACJC,UAAU,gCAJZ,SAMGX,EAAE,gBAGL,SAACQ,EAAA,EAAD,CACE8L,GAAI,EACJ7L,GAAI,EACJC,GAAI,EACJC,UAAU,8CAJZ,mBAMMwK,IAAM,OAAC3J,QAAD,IAACA,OAAD,EAACA,EAAiB0B,mBAAmBqJ,OAC7C,WAPJ,eAQUpB,IAAM,OAAC3J,QAAD,IAACA,OAAD,EAACA,EAAiB2B,iBAAiBoJ,OAC/C,kBAKN,UAAChM,EAAA,EAAD,CAAKI,UAAU,aAAf,WACE,UAACH,EAAA,EAAD,CAAKC,GAAG,IAAI6L,GAAI,EAAG3L,UAAU,cAA7B,WACE,gBAAKA,UAAU,uBAAf,mBACY,OAAVsD,QAAU,IAAVA,GAAAA,EAAYwI,kBACR5L,EAAAA,EAAAA,IAAgB,OAACoD,QAAD,IAACA,OAAD,EAACA,EAAYwI,kBAC7B,MAEN,gBAAK9L,UAAU,uBAAf,SACGX,EAAE,6BAIP,UAACQ,EAAA,EAAD,CAAKC,GAAG,IAAI6L,GAAI,EAAG3L,UAAU,cAA7B,WACE,gBAAKA,UAAU,uBAAf,mBACY,OAAVsD,QAAU,IAAVA,GAAAA,EAAYyI,aACR7L,EAAAA,EAAAA,IAAgB,OAACoD,QAAD,IAACA,OAAD,EAACA,EAAYyI,aAC7B,MAEN,gBAAK/L,UAAU,uBAAf,SACGX,EAAE,8CAOb,SAACQ,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAGC,UAAU,sBAA7B,UACE,SAAC,EAAD,CAAoBb,QAASA,WA2DtC,E,8EChOD,GApHoB,SAACqB,GAAW,IAAD,IAE3BwL,EAOExL,EAPFwL,KACAC,EAMEzL,EANFyL,YACAC,EAKE1L,EALF0L,QACAC,EAIE3L,EAJF2L,aACAC,EAGE5L,EAHF4L,cACAC,EAEE7L,EAFF6L,aACAC,EACE9L,EADF8L,qBAEF,OACE,UAACC,GAAA,EAAD,CACEP,KAAMA,EACNQ,OAAQP,EACRjC,KAAK,KACL,kBAAgB,gCAChByC,UAAQ,EALV,WAOE,SAACF,GAAA,SAAD,CAAcG,aAAW,EAAzB,UACE,SAACH,GAAA,QAAD,UAAcL,OAEhB,SAACK,GAAA,OAAD,WACE,iBAAMjH,GAAG,aAAaqH,SAAUR,EAAhC,UACE,+BACE,UAACvM,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAKC,GAAI,KACT,SAACD,EAAA,EAAD,CAAKC,GAAI,EAAG2C,MAAO,CAAEmK,QAAS,OAA9B,UACE,SAACrB,EAAA,UAAD,CACEhK,SAAU,SAACmG,GAAD,OAAO2E,EAAa3E,EAApB,EACVsC,KAAK,KACLxD,KAAK,OACLrC,KAAK,YACLF,MAAK,UAAEmI,EAAa,iBAAf,QAAgC,GACrCS,UAAQ,OAGZ,SAAChN,EAAA,EAAD,CAAKC,GAAI,EAAG2C,MAAO,CAAE+C,OAAQ,OAA7B,UACE,SAAC+F,EAAA,UAAD,CACEhK,SAAU,SAACmG,GAAD,OAAO2E,EAAa3E,EAApB,EACVsC,KAAK,KACLxD,KAAK,OACLrC,KAAK,UACLF,MAAK,UAAEmI,EAAa,eAAf,QAA8B,GACnCS,UAAQ,MAIXnD,EAAAA,GAAAA,KAAiB,SAACrB,EAAOV,GAAR,eAChB,UAAC4D,EAAA,QAAD,CAEE9I,MAAO,CAAE+C,OAAQ,OACjBgG,GAAI5L,EAAAA,EACJkN,UAAS,UAAKnF,EAAL,YAAUU,EAAMpE,OAJ3B,WAME,SAACpE,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,SAACyL,EAAA,QAAD,WACE,uBAAIlD,EAAMJ,aAGd,SAACpI,EAAA,EAAD,CAAKC,GAAI,EAAT,SACGuI,EAAM0E,SACL,UAACxB,EAAA,SAAD,CACEhK,SAAU,SAACmG,GACTA,EAAEoD,iBACFuB,EAAa,CACXZ,OAAQ,CACNtH,KAAMkE,EAAMpE,MACZA,MAAOyD,EAAE+D,OAAOxH,QAGrB,EACD+F,KAAK,KACL,aAAW,iBAXb,WAaE,oBAAQ/F,MAAO,GAAf,oBAA2BoE,EAAMJ,SAChCqE,EAAoB,UAACjE,EAAM2E,cAAP,QAAiB3E,EAAMpE,OAAOV,KACjD,SAACyJ,EAAQC,GAAT,OACE,mBAEEhJ,MAAO+I,EAFT,SAIGA,GAJH,UACU3E,EAAMpE,MADhB,YACyBgJ,EADzB,KADF,UAYR,SAACpN,EAAA,EAAD,CAAKC,GAAI,EAAT,UACE,SAACyL,EAAA,UAAD,CACEhK,SAAU,SAACmG,GAAD,OAAO2E,EAAa3E,EAApB,EACVsC,KAAK,KACLxD,KAAK,OACLrC,KAAMkE,EAAMpE,MACZA,MAAK,UAAEmI,EAAc/D,EAAMpE,cAAtB,QAAgC,GACrC4I,UAAQ,QA9CPlF,EAFS,cAyD1B,UAAC4E,GAAA,SAAD,YACE,SAAC3C,EAAA,EAAD,CAAQG,QAAQ,YAAYD,QAASmC,EAArC,oBAGA,SAACrC,EAAA,EAAD,CAAQsD,KAAK,aAAa1G,KAAK,SAASuD,QAAQ,OAAhD,0BAMP,EC9EYoD,GAAwB,WAAO,IAAD,EACnCxM,GAAWC,EAAAA,EAAAA,MAIjB,GAoBIwM,EAAAA,EAAAA,KACF,SAACC,GAAD,YAAY,CACVC,iBAAkBD,EAAM3M,gBAAgB4M,iBACxCC,mBAAoBF,EAAM3M,gBAAgB6M,mBAC1CC,UAAWH,EAAM3M,gBAAgB8M,UACjCC,YAAW,UAAEJ,EAAMK,uBAAR,QAA2B,GACtCpK,WAAY+J,EAAM3M,gBAAgBA,gBAClCiN,SAAUN,EAAMM,SAASA,SACzBC,YAAaP,EAAM3M,gBAAgBI,uBACnCU,MAAO6L,EAAM3M,gBAAgBmN,iBAC7BC,aAAcT,EAAM3M,gBAAgBoN,aACpC1D,mBAAoBiD,EAAM3M,gBAAgB0J,mBAC1CgC,cAAeiB,EAAM3M,gBAAgB0L,cACrCrJ,YAAasK,EAAMM,SAAS5K,YAC5BgL,sBAAuBV,EAAMM,SAASI,sBACtCC,iBAAkBX,EAAMM,SAASK,iBACjC1B,qBAAsBe,EAAM3M,gBAAgB4L,qBAC5C2B,cAAeZ,EAAM3M,gBAAgBuN,cACrCjH,YAAaqG,EAAM3M,gBAAgBsG,YACnCjG,qBAAsBsM,EAAM3M,gBAAgBK,qBAC5CmN,qBAAsBb,EAAM3M,gBAAgBwN,qBAC5Cb,MAAOA,EApBT,GAsBAc,EAAAA,IA1CAb,EADF,EACEA,iBACAC,EAFF,EAEEA,mBACAC,EAHF,EAGEA,UACAlK,EAJF,EAIEA,WACAqK,EALF,EAKEA,SACAC,EANF,EAMEA,YACApM,EAPF,EAOEA,MACAsM,EARF,EAQEA,aACA1D,EATF,EASEA,mBACAgC,EAVF,EAUEA,cACArJ,EAXF,EAWEA,YAEAiL,GAbF,EAYED,sBAZF,EAaEC,kBACA1B,EAdF,EAcEA,qBACA2B,EAfF,EAeEA,cACAjH,EAhBF,EAgBEA,YACAjG,EAjBF,EAiBEA,qBACAmN,EAlBF,EAkBEA,qBACAb,EAnBF,EAmBEA,MA0BI7D,GAAW4E,EAAAA,EAAAA,UACjB,GAAsCpL,EAAAA,EAAAA,YAAtC,eAAOqL,EAAP,KAAoBC,EAApB,KACA,GAAwCtL,EAAAA,EAAAA,WAAS,GAAjD,eAAOuL,EAAP,KAAqBhE,EAArB,KACA,GAAwCvH,EAAAA,EAAAA,UAAS,IAAjD,eACMwL,GADN,WACWJ,EAAAA,EAAAA,QAAO,KACZK,GAAcL,EAAAA,EAAAA,QAAO,IAE3BM,QAAQC,IAAI,CAAEtB,MAAAA,IAEd,IAAMnE,IAAqB0F,EAAAA,EAAAA,cAAY,SAAClH,GAEtC/G,GAASoK,EAAAA,EAAAA,IAAwB,CAAEmD,qBAAsBxG,IAC1D,GAAE,IA4CGH,IAAcqH,EAAAA,EAAAA,cAAY,SAACzG,GAC/BmG,EAAenG,EAAO0G,IACvB,GAAE,IAEGC,IAAsBF,EAAAA,EAAAA,cAAY,WACtCrE,GAAgB,SAACwE,GAAD,OAAWA,CAAX,GACjB,GAAE,CAACR,IASES,IAAoBJ,EAAAA,EAAAA,cAAY,SAAClH,GACrC,MAAwBA,EAAE+D,OAAlBtH,EAAR,EAAQA,KAAMF,EAAd,EAAcA,MAQdtD,GAASsO,EAAAA,EAAAA,IAA8B9K,EAAMF,GAC9C,GAAE,IAqDG8C,GAAc,SAACmI,GACnB,IAAMC,EAAMD,EAAME,OAAO/G,MACzB1H,GAAS0O,EAAAA,EAAAA,IAAsBF,GAChC,EAKD,OACE,iBAAKnP,UAAU,kBAAf,WACE,SAAC,GAAD,QACEsD,WAAYA,EAAWgM,KACvBnQ,QAASmE,EAAWiM,kBACpB1O,gBAAe,OAAEwM,QAAF,IAAEA,GAAF,UAAEA,EAAO3M,uBAAT,aAAE,EAAwBG,iBACrC+M,KAEN,SAACrN,GAAD,0BACMqN,GACAP,GAFN,IAGE7L,MAAOA,EACP8L,iBAAkBA,EAClBC,mBAAoBA,EACpB9M,SAAUuN,MAgBZ,UAACpO,EAAA,EAAD,YACE,SAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,UACE,SAAC8C,EAAD,CACEE,YAAaA,EACbD,eAAgB6K,OAGpB,SAAC9N,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,UACE,SAACuI,EAAD,CACE7B,QAASkH,EACTjH,cAAe8I,EAAAA,GACf5I,UAAW7D,EAAY8B,MACrB,SAACC,EAAGC,GAAJ,OAAU,IAAI5E,KAAK2E,EAAEb,OAAS,IAAI9D,KAAK4E,EAAEd,MAAzC,IAEF0C,eAAgB8I,EAAAA,GAChBC,MAAO1B,EACPlH,iBAjGmB,SAACY,GAC5B,IAAMiI,EAAWlB,EAAYmB,QAAQC,WACnC,SAACjM,GAAD,OAAOA,EAAEwL,OAAO/G,QAAUX,EAAE0H,OAAO/G,KAAnC,KAEgB,IAAdsH,EACFlB,EAAYmB,QAAZ,kBAA0BnB,EAAYmB,SAAtC,CAA+ClI,IAE/C+G,EAAYmB,QAAQD,GAAYjI,EAGlC/G,GAASmP,EAAAA,EAAAA,IAAsBpI,GAChC,EAuFSX,YAAaA,GACbC,YAAaA,UAKnB,SAAC,GAAD,CACEsF,qBAAsBA,EACtBF,cAAeA,EACfJ,KAAMuC,EACNrC,QAAQ,cACRD,YAAa6C,GACb3C,aAzIgB,SAACzE,GACrBA,EAAEoD,iBACF,IAAMiF,EAA+B,QAAzBnC,EAAYlD,SACxB/J,GACEqP,EAAAA,EAAAA,IAAmB5D,EAAe5K,EAAOT,EAAsBgP,GAElE,EAoIK1D,aAAc2C,MAEhB,SAAC,EAAD,CACE9F,mBAAoBA,GACpBC,kBArLoB,WC1GU,IAAC8G,ED2GnCtP,GC3GmCsP,ED2GHC,EAAAA,GC1GlC,yCAAO,WAAOvP,GAAP,8FAEHA,EAAS,CACP6F,KAAM2J,GAAAA,EAAAA,0BAEFC,EAAMC,GAAAA,EAAAA,mBALT,SAMeC,IAAAA,IAAUF,GANzB,OAMGG,EANH,OAOH5P,EAAS,CACP6F,KAAM2J,GAAAA,EAAAA,uBACNK,QAASD,EAAIhL,KAAKkL,MAEpBR,EAASM,EAAIhL,KAAKkL,KAXf,kDAaH9P,EAAS,CACP6F,KAAM2J,GAAAA,EAAAA,wBAdL,0DAAP,uDD2GC,EAoLK/G,gBAjMkB,SAAC1B,GACvBA,EAAEoD,iBAOFnK,GAAS+P,EAAAA,EAAAA,MACV,EAyLKpH,aAnLe,SAAC5B,GACpBA,EAAEoD,iBACFnK,EC3F8B,SAACgQ,EAAShD,EAAUsC,GACpD,gDAAO,WAAOtP,GAAP,oGAEHA,EAAS,CACP6F,KAAM2J,GAAAA,EAAAA,0BAEJS,EAAoB,GACpBC,EAAmB,GACnBF,EAAQxN,SACVyN,EAAoBD,EAAQ9M,QAC1B,SAACC,EAAKC,GAAN,wBACKD,GADL,CAEE,CACEgN,cAAe/M,EAAKqL,OAAO/G,MAC3B0I,iBAAkBhN,EAAKiN,SACvBC,OAAQlN,EAAKwB,KAAK0L,OAClBC,QAASnN,EAAKwB,KAAK2L,QACnBC,cAAepN,EAAKwB,KAAK4L,cACzBC,cAAerN,EAAKwB,KAAK6L,cACzBC,QAAStN,EAAKwB,KAAK8L,QACnBC,MAAOvN,EAAKwB,KAAK+L,MACjBC,aAAcxN,EAAKwB,KAAKgM,aACxBC,eAAgBzN,EAAKwB,KAAKiM,eAC1BC,QAAS1N,EAAKwB,KAAKkM,QACnBC,QAAS3N,EAAKwB,KAAKmM,UAdvB,GAiBA,KAGA/D,EAASxK,SACX0N,EAAmBlD,EAAS9J,QAC1B,SAACC,EAAKC,GAAN,wBACKD,GADL,CAEE,CACEgN,cAAe/M,EAAKqL,OAAO/G,MAC3B0I,iBAAkBhN,EAAKiN,WAJ3B,GAOA,KAGEZ,EAAMC,GAAAA,EAAAA,eACNsB,EAAK,CACTC,eAAgBhB,EAChBD,QAASE,GA5CR,UA8CeP,IAAAA,IAAUF,EAAKuB,GA9C9B,aA+CqBE,KADlBtB,EA9CH,QA+CKhL,KAAKuM,QAA4C,MAApBvB,EAAIhL,KAAKuM,QAC5CrS,OAAOC,eAAeqS,QAAQ,eAAgBxB,EAAIhL,KAAKvB,MAEzDrD,EAAS,CACP6F,KAAM2J,GAAAA,EAAAA,uBACNK,QAASD,EAAIhL,OAEf0K,EAASM,EAAIhL,KAAKyM,SAElBrR,GAASuK,EAAAA,EAAAA,IAAmB,CAAE+G,eAAe,KAxD1C,kDA0DHtR,EAAS,CACP6F,KAAM2J,GAAAA,EAAAA,wBA3DL,0DAAP,qDA+DD,CD2BY+B,CAAmB1D,EAAGoB,QAASnB,EAAYmB,QAASM,EAAAA,KAC7D1B,EAAGoB,QAAU,GACbnB,EAAYmB,QAAU,EAEvB,EA8KKnJ,QAAS+G,EACT9G,cAAeA,EAAAA,GACfzC,MAAOiK,EACPvH,eAAgBA,EAAAA,GAChB6C,SAAUA,EACV5C,UAAWkH,EAAajJ,MACtB,SAACC,EAAGC,GAAJ,OAAU,IAAI5E,KAAK2E,EAAEb,OAAS,IAAI9D,KAAK4E,EAAEd,MAAzC,IAEFsF,kBAAmD,IAAhC2E,EAAqB/K,OACxCkG,SArLqB,WAErBmF,EAAGoB,QAAQzM,QACbqL,EAAGoB,QAAQuC,SAAQ,SAAC3O,GAClB7C,GAASyR,EAAAA,EAAAA,IAAqB5O,GAC/B,GAGJ,EA8KK6G,qBA7KsB,WAC1B,IAAMgI,EAAO,CACXC,gBAAiBpE,EAAqB3K,KAAI,SAACmE,GAAD,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAGzD,KAAV,IAC1CsO,MAAO/Q,EACPmC,OAAQ5C,EACR2J,SAAmC,QAAzBkD,EAAYlD,UAExB/J,GAAS6R,EAAAA,EAAAA,IAAyBH,GACnC,EAsKKxL,UAAWU,GACX6C,mBAAoBA,EACpBG,gBAAiBA,EACjBN,UA5IiB,WACrB,IAAMoI,EAAO,CACXC,gBAAiBpE,EAAqB3K,KAAI,SAACmE,GAAD,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAGzD,KAAV,IAC1CsO,MAAO/Q,GAETb,GAAS8R,EAAAA,EAAAA,IAAqBJ,EAAMnC,EAAAA,IACrC,EAuIKpJ,iBAxHmB,SAACY,GAWxB,CAACA,GAAGyK,SAAQ,SAAC3O,EAAMmE,GAEfsG,EAAczK,EAAKkP,UAAUlP,EAAK4L,OAAO/G,SAAW7E,EAAKwN,UAC3CxC,EAAGoB,QAAQzM,OACzBqL,EAAGoB,QAAQ+C,OAAOnE,EAAGoB,QAAQgD,QAAQlL,EAAE0H,OAAO/G,OAAQ,GAEtDmG,EAAGoB,QAAH,kBAAiBpB,EAAGoB,SAApB,CAA6BlI,GAEhC,GACF,EAqGKwC,KApGiB,SAACxC,GACtBA,EAAEoD,iBACFuD,EAAYwE,iBACb,EAkGK1I,KAjGiB,SAACzC,GACtBA,EAAEoD,iBACFuD,EAAYyE,iBACb,EA+FK/L,YAAaA,GACbC,YAAaA,EACb+L,aA3Fe,SAAC5K,GACpBuG,QAAQC,IAAIxG,EACb,MA6FF,EACD,K","sources":["Component/YearlytotalVolumes.js","Component/TimeFilters.js","Component/RangeSelectSlider/index.js","Component/DemandVolumeforecastgraph.js","Component/DataTable/index.js","Component/yearMonthtable.js","Component/Common/React-Select/index.js","Component/Common/MainSelect/index.js","Component/Tablegrouping.js","Component/KPIComponent/index.js","Component/Common/AddRowModal/index.js","Component/Maincomponent.js","redux/Actions/FinalSubmission/index.js"],"sourcesContent":["import \"../css/yearlyTotalvolume.css\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { convertToMillion } from \"../Utils\";\r\n\r\nexport const YearlytotalVolumes = ({ volumes }) => {\r\n  const { t, i18n } = useTranslation();\r\n  useEffect(() => {\r\n    i18n.changeLanguage(window.sessionStorage.getItem(\"language\"));\r\n  }, []);\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col sm={12} md={12} className=\"border shadow\">\r\n          <div className=\"p-1 addMarginDatacolor\">\r\n            {t(\"YEARLY TOTAL VOLUMES\")}\r\n          </div>\r\n          <Row className=\"addMarginImportanttop\">\r\n            <Col sm={4} md={4} className=\"mb-3\">\r\n              <Row className=\"text-center\">\r\n                <Col\r\n                  sm={12}\r\n                  md={12}\r\n                  className=\"addMargintopColordata text-center\"\r\n                >\r\n                  {volumes?.previousYear\r\n                    ? convertToMillion(volumes?.previousYear)\r\n                    : 0}\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"row text-center\">\r\n                <Col className=\"text-center Volumedata\">\r\n                  {`${new Date().getFullYear() - 1}`} VOLUME\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n\r\n            <Col sm={4} md={4} className=\"mb-3\">\r\n              <Row className=\"text-center\">\r\n                <Col\r\n                  sm={12}\r\n                  md={12}\r\n                  className=\"addMargintopColordata text-center\"\r\n                >\r\n                  {volumes?.currntYear\r\n                    ? convertToMillion(volumes?.currntYear)\r\n                    : 0}\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"row text-center\">\r\n                <Col className=\"text-center Volumedata\">\r\n                  {`${new Date().getFullYear()}`} VOLUME\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n\r\n            <Col sm={4} md={4} className=\"mb-3\">\r\n              <Row className=\"text-center\">\r\n                <Col\r\n                  sm={12}\r\n                  md={12}\r\n                  className=\"addMargintopColordata text-center\"\r\n                >\r\n                  {volumes?.nextYear ? convertToMillion(volumes?.nextYear) : 0}\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"row text-center\">\r\n                <Col className=\"text-center Volumedata\">\r\n                  {`${new Date().getFullYear() + 1}`} VOLUME\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* <div className=\"row addcolumpads addRowmargintop \">\r\n            <div className=\"col-sm-12 border shadow\">\r\n               <div className='row addMarginandPaddingleft addMarginDatacolor'>\r\n                  {t('YEARLY TOTAL VOLUMES')}\r\n               </div>\r\n               <div className='row addMarginImportanttop'>\r\n                  <div className='col-sm-4'>\r\n                     <div className='row text-center'><div className='col-sm-12 addMargintopColordata text-center'>2.14M</div></div>\r\n                     <div className='row text-center'><div className='col-sm-12 text-center Volumedata'>2019 VOLUME</div></div>\r\n                  </div>\r\n                  <div className='col-sm-4 text-center'>\r\n                     <div className='row'><div className='col-sm-12 addMargintopColordata text-center'>2.14M</div></div>\r\n                     <div className='row  text-center'><div className='col-sm-12 text-center Volumedata'>2020 VOLUME</div></div>\r\n                  </div>\r\n                  <div className='col-sm-4'>\r\n                     <div className='row text-center'><div className='col-sm-12 addMargintopColordata text-center'>2.23M</div></div>\r\n                     <div className='row text-center'><div className='col-sm-12 text-center Volumedata'>2021 VOLUME</div></div>\r\n                  </div>\r\n               </div>\r\n            </div>\r\n         </div> */}\r\n    </>\r\n  );\r\n};\r\nexport default YearlytotalVolumes;\r\n","import React, { useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { useRef } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Stack from \"react-bootstrap/Stack\";\r\nimport \"../css/TimeFiltercss.css\";\r\nimport { getDateRange } from \"../Utils\";\r\n\r\n// import { actionSelectRange } from \"../../redux/Actions/PlotData\";\r\nimport { actionSelectRange } from \"../redux/Actions/PlotData\";\r\nimport { actionTimeFilterChange } from \"../redux/Actions/QuickFilterData\";\r\n\r\nexport const TimeFilters = (props) => {\r\n  const { t, i18n } = useTranslation();\r\n  const { totalSum, quickFilterData } = props;\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    i18n.changeLanguage(window.sessionStorage.getItem(\"language\"));\r\n  }, []);\r\n\r\n  const { timeFilterDates, quickFilterDefaultData, tableDropDownFilters } =\r\n    quickFilterData;\r\n\r\n  const demandOnChange = (dates) => {\r\n    const [start, end] = dates;\r\n    dispatch(actionTimeFilterChange(\"demandStartDate\", start));\r\n    dispatch(actionTimeFilterChange(\"demandEndDate\", end));\r\n    if (end) {\r\n      // dispatch(actionSelectRange(\"demand_period\", getDateRange(start, end)));\r\n      dispatch(actionSelectRange(\"demand_period\"));\r\n    }\r\n  };\r\n\r\n  const forecasatOnChange = (dates) => {\r\n    const [start, end] = dates;\r\n    dispatch(actionTimeFilterChange(\"forecastStartDate\", start));\r\n    dispatch(actionTimeFilterChange(\"forecastEndDate\", end));\r\n    if (end) {\r\n      // dispatch(actionSelectRange(\"forecast_period\", getDateRange(start, end)));\r\n      dispatch(actionSelectRange(\"forecast_period\"));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container-fluid\">\r\n        <Row className=\"border shadow quickFilter\">\r\n          <Col sm={12} md={12}>\r\n            <Row className=\"align-items-center\">\r\n              <Col\r\n                sm={2}\r\n                md={2}\r\n                className=\"quickFilterfontcolor addquickFilterFontsize\"\r\n              >\r\n                {t(\"TIME FILTERS\")}\r\n              </Col>\r\n\r\n              <Col sm={4} md={4}>\r\n                <Stack\r\n                  direction=\"horizontal\"\r\n                  className=\"align-items-center justify-content-center\"\r\n                  gap={2}\r\n                >\r\n                  <div className={\"daterange-label\"}>\r\n                    {t(\"Filter By Demand Period\")}\r\n                  </div>\r\n                  <div>\r\n                    <DatePicker\r\n                      // minDate={new Date(demandStartDate)}\r\n                      // maxDate={new Date(demandEndDate)}\r\n                      maxDate={new Date(timeFilterDates.demandFilterEndDate)}\r\n                      selected={timeFilterDates.demandStartDate}\r\n                      onChange={demandOnChange}\r\n                      startDate={timeFilterDates.demandStartDate}\r\n                      endDate={timeFilterDates.demandEndDate}\r\n                      selectsRange\r\n                      inline={false}\r\n                      // isClearable\r\n                      dateFormat=\"MMM yyyy\"\r\n                      showMonthYearPicker\r\n                      shouldCloseOnSelect\r\n                    />\r\n                  </div>\r\n                </Stack>\r\n              </Col>\r\n              <Col sm={4} md={4}>\r\n                <Stack\r\n                  direction=\"horizontal\"\r\n                  className=\"align-items-center justify-content-center\"\r\n                  gap={2}\r\n                >\r\n                  <div className={\"daterange-label\"}>\r\n                    {t(\"Filter By Forecast Period\")}\r\n                  </div>\r\n                  <div>\r\n                    <DatePicker\r\n                      minDate={\r\n                        new Date(timeFilterDates.forecastFilterStartDate)\r\n                      }\r\n                      // minDate={moment().toDate()}\r\n                      selected={timeFilterDates.forecastStartDate}\r\n                      onChange={forecasatOnChange}\r\n                      startDate={timeFilterDates.forecastStartDate}\r\n                      endDate={timeFilterDates.forecastEndDate}\r\n                      selectsRange\r\n                      inline={false}\r\n                      // isClearable\r\n                      dateFormat=\"MMM yyyy\"\r\n                      showMonthYearPicker\r\n                    />\r\n                  </div>\r\n                </Stack>\r\n              </Col>\r\n              <Col sm={2} md={2}>\r\n                <Stack\r\n                  direction=\"horizontal\"\r\n                  className=\"align-items-center justify-content-center\"\r\n                  gap={2}\r\n                >\r\n                  <div className={\"daterange-label\"}>{t(\"Total Sum\")}</div>\r\n                  <div style={{ fontWeight: 600 }}>{totalSum}</div>\r\n                </Stack>\r\n              </Col>\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default TimeFilters;\r\n","import Slider from \"rc-slider\";\r\nimport \"rc-slider/assets/index.css\";\r\nconst { createSliderWithTooltip } = Slider;\r\nconst Range = createSliderWithTooltip(Slider.Range);\r\n\r\nconst RangeSelectSlider = (props) => {\r\n  const { onChange, defaultValue, defaultRange, handleStyle } = props;\r\n\r\n  return (\r\n    <Range\r\n      marks={defaultRange}\r\n      min={1}\r\n      max={Object.keys(defaultRange).length}\r\n      defaultValue={defaultValue}\r\n      onChange={onChange}\r\n      handleStyle={handleStyle}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RangeSelectSlider;\r\n","import \"../css/DemandVolumeforecast.css\";\r\nimport {\r\n  LineChart,\r\n  ResponsiveContainer,\r\n  Legend,\r\n  Tooltip,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n} from \"recharts\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Stack from \"react-bootstrap/Stack\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport { cloneDeep } from \"lodash\";\r\n\r\nexport const Demandvolumeforecast = ({ timeFilterData, sdfTableKys }) => {\r\n  const { t, i18n } = useTranslation();\r\n  useEffect(() => {\r\n    i18n.changeLanguage(window.sessionStorage.getItem(\"language\"));\r\n  }, []);\r\n  // const chartData = timeFilterData;\r\n  const [chartData, setChartData] = useState(timeFilterData);\r\n\r\n  useEffect(() => {\r\n    if (timeFilterData.length) {\r\n      const temp = cloneDeep(timeFilterData);\r\n      const filterData = [...temp]\r\n        .map((item) => {\r\n          return Object.keys(item)\r\n            .filter((f) => f !== \"name\" && f !== \"total\")\r\n            .reduce((acc, curr) => {\r\n              return [\r\n                ...acc,\r\n                {\r\n                  date: curr,\r\n                  value: parseFloat(item[curr]) === 0 ? null : item[curr],\r\n                  name: item?.name,\r\n                },\r\n              ];\r\n            }, []);\r\n        })\r\n        .flat();\r\n      const result = Object.keys(timeFilterData[0])\r\n        .filter((f) => f !== \"name\" && f !== \"total\")\r\n        .map((w) => {\r\n          const forecast = filterData.find(\r\n            (fc) => fc.date === w && fc.name.toLowerCase() === \"sdf forecast\"\r\n          );\r\n          const dmndVol = filterData.find(\r\n            (fc) => fc.date === w && fc.name.toLowerCase() === \"demand volume\"\r\n          );\r\n          const modForecast = filterData.find(\r\n            (fc) =>\r\n              fc.date === w && fc.name.toLowerCase() === \"sdf modified forecast\"\r\n          );\r\n          return {\r\n            date: w,\r\n            \"Demand volume\": dmndVol?.value,\r\n            \"SDF forecast\": forecast?.value,\r\n            \"SDF Modified forecast\": modForecast?.value,\r\n          };\r\n        });\r\n      // console.log({\r\n      //   result\r\n      // });\r\n\r\n      setChartData(\r\n        // filterData.reduce((arr, curr) => {\r\n        //   const index = arr.findIndex((x) => x.date === curr.date);\r\n        //   if (index > -1) {\r\n        //     return arr;\r\n        //   }\r\n        //   return [...arr, curr];\r\n        // }, [])\r\n        // filterData\r\n        result.sort((a, b) => new Date(a.date) - new Date(b.date))\r\n      );\r\n      // setOthervalues(\r\n      //   timeFilterData &&\r\n      //     timeFilterData[0] &&\r\n      //     Object.keys(timeFilterData[0])\r\n      //       .filter((k) => timeFilterData[0][k] != null)\r\n      //       .reduce((a, k) => ({ ...a, [k]: timeFilterData[0][k] }), {})\r\n      // );\r\n    }\r\n  }, [timeFilterData]);\r\n\r\n  const formatyaxis = (value) => {\r\n    return value + \"K\";\r\n  };\r\n\r\n  const lineColors = [\r\n    \"#256D85\",\r\n    \"#F96666\",\r\n    \"#182747\",\r\n    \"#FFDE00\",\r\n    \"#E80F88\",\r\n    \"#1CD6CE\",\r\n    \"#FF884B\",\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      {/* <div className=\"container-fluid\"> */}\r\n      <Row style={{ marginTop: \"3em\" }}>\r\n        <Col sm={12} md={12}>\r\n          <Stack direction=\"horizontal\" gap={2}>\r\n            <div className=\"addtopforDemandvolumeforecast addpaddingforDemandcolumeforecast\">\r\n              {t(\"DEMAND VOLUME AND FORECAST CHART\")}\r\n            </div>\r\n            {/* <div className=\"ms-auto\">\r\n              <Button onClick={() => updatePlotData()} variant=\"primary\"> {t(\"Apply Changes\")}</Button>{' '}\r\n            </div> */}\r\n          </Stack>\r\n        </Col>\r\n\r\n        <Col sm={12} md={12} className=\"p-2 line-chart\">\r\n          <ResponsiveContainer width=\"100%\" height={230}>\r\n            <LineChart\r\n              width={1130}\r\n              id=\"demandVolumelinechart\"\r\n              height={350}\r\n              data={chartData}\r\n              margin={{\r\n                top: 10,\r\n                right: 20,\r\n                left: 20,\r\n                bottom: 10,\r\n              }}\r\n              style={{\r\n                fontSize: \"14px\",\r\n              }}\r\n            >\r\n              <Tooltip />\r\n              <Legend />\r\n              <XAxis dataKey=\"date\" className=\"line-x-axis\" />\r\n              <YAxis tickFormatter={formatyaxis} />\r\n              <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\r\n              {/* {sdfTableKys.map((e, i) => (\r\n                <Line\r\n                  key={i}\r\n                  type=\"monotone\"\r\n                  dataKey={e}\r\n                  stroke={lineColors[i]}\r\n                />\r\n              ))} */}\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey={\"Demand volume\"}\r\n                stroke={lineColors[1]}\r\n              />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey={\"SDF forecast\"}\r\n                stroke={lineColors[0]}\r\n              />\r\n\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey={\"SDF Modified forecast\"}\r\n                stroke={lineColors[5]}\r\n              />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </Col>\r\n      </Row>\r\n      {/* </div> */}\r\n\r\n      {/* <div className=\"row addtopforDemandvolumeforecast addpaddingforDemandcolumeforecast\">\r\n        <div className=\"col-sm-12 addSpacebetweendemandandchart \">\r\n          {t(\"DEMAND VOLUME AND FORECAST CHART\")}\r\n        </div>\r\n        <div className=\"col-sm-12 text-end\" style={{ paddingBottom: \"12px\" }}>\r\n          <button onClick={() => updatePlotData()} className=\"btn buttonClr\">\r\n            {t(\"Apply Changes\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"col-sm-12 border addchartPadtop shadow\">\r\n          <ResponsiveContainer width=\"100%\" height={400}>\r\n            <LineChart\r\n              width={1130}\r\n              id=\"demandVolumelinechart\"\r\n              height={300}\r\n              data={chartData}\r\n            >\r\n              <Tooltip />\r\n              <XAxis dataKey=\"total\" />\r\n              <YAxis tickFormatter={formatyaxis} />\r\n              <CartesianGrid stroke=\"#eee\" strokeDasharray=\"5 5\" />\r\n              {otherValues &&\r\n                Object.keys(otherValues).map((e, i) => (\r\n                  <Line key={i} type=\"monotone\" dataKey={e} stroke=\"#92C12F\" />\r\n                ))}\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        </div>\r\n      </div> */}\r\n    </>\r\n  );\r\n};\r\nexport default Demandvolumeforecast;\r\n","import { AgGridColumn, AgGridReact } from \"ag-grid-react\";\r\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\r\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\r\nimport \"ag-grid-community/dist/ag-grid-community.cjs.js\";\r\nconst DataTable = (props) => {\r\n  const {\r\n    rowData,\r\n    defaultColDef,\r\n    defaultActions,\r\n    tableCols,\r\n    gridReady,\r\n    handleCellChange,\r\n    cellClicked,\r\n    clickedCell,\r\n  } = props;\r\n  return (\r\n    <div className=\"ag-theme-alpine w-100 mt-4\" style={defaultActions.style}>\r\n      <AgGridReact\r\n        rowData={rowData} // Row Data for Rows\r\n        // columnDefs={tableCols} // Column Defs for Columns\r\n        defaultColDef={defaultColDef} // Default Column Properties\r\n        {...defaultActions}\r\n        enableRangeSelection\r\n        enableFillHandle\r\n        undoRedoCellEditing\r\n        enableCellChangeFlash\r\n        undoRedoCellEditingLimit={20}\r\n        onGridReady={gridReady}\r\n        minHight={300}\r\n        onCellValueChanged={handleCellChange}\r\n      >\r\n        {tableCols.map((e, i) => (\r\n          // <Fragment key={i}>\r\n          <AgGridColumn\r\n            onCellClicked={cellClicked}\r\n            key={i}\r\n            suppressSizeToFit\r\n            minWidth={150}\r\n            headerName={e?.label}\r\n            editable={(params) => {\r\n              return (\r\n                !e?.text &&\r\n                e.value === clickedCell &&\r\n                params?.data?.name?.toLowerCase() === \"sdf modified forecast\"\r\n              );\r\n            }}\r\n            field={e?.value}\r\n          />\r\n          // </Fragment>\r\n        ))}\r\n      </AgGridReact>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n","import { useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport \"../css/yearMonthtable.css\";\r\nimport { useState } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport DataTable from \"./DataTable\";\r\nimport { useRef } from \"react\";\r\n\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nexport const YearMonthtablecomponent = ({ ...rest }) => {\r\n  // const { plotData, sdfTableKys } = props;\r\n  const { t, i18n } = useTranslation();\r\n  useEffect(() => {\r\n    i18n.changeLanguage(window.sessionStorage.getItem(\"language\"));\r\n  }, []);\r\n  // const changeSDFForecastValue = (item, i) => {\r\n  //   dispatch(actionChangeSDFForecast(+item.target.value, i));\r\n  // };\r\n  // const addDemandvolueData = () => {\r\n  //   return sdfTableKys.map((value, i) => {\r\n  //     return (\r\n  //       <td key={i} colSpan={1}>\r\n  //         {value?.demand_volume}\r\n  //       </td>\r\n  //     );\r\n  //   });\r\n  // };\r\n\r\n  // const addSdfmodifiedforecast = () => {\r\n  //   return sdfTableKys.map((value, i) => {\r\n  //     return (\r\n  //       <td colSpan={1} key={i}>\r\n  //         {\r\n  //           <>\r\n  //             <input\r\n  //               min={0}\r\n  //               type={\"number\"}\r\n  //               value={value?.forecast_enriched}\r\n  //               onChange={(e) => changeSDFForecastValue(e, i)}\r\n  //             />\r\n  //           </>\r\n  //         }\r\n  //       </td>\r\n  //     );\r\n  //   });\r\n  // };\r\n  // const addSdfForecast = () => {\r\n  //   return sdfTableKys.map((value, i) => {\r\n  //     return (\r\n  //       <td colSpan={1} key={i}>\r\n  //         {value?.forecast_quantity}\r\n  //       </td>\r\n  //     );\r\n  //   });\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   setdisplayTotalsum(\r\n  //     plotData.reduce((acc, curr) => {\r\n  //       return (\r\n  //         acc + +curr?.total\r\n  //         // curr?.forecast_enriched +\r\n  //         // curr?.forecast_quantity\r\n  //       );\r\n  //     }, 0)\r\n  //   );\r\n  // }, [plotData]);\r\n\r\n  // const bindTablehead = () => {\r\n  //   return (\r\n  //     plotData &&\r\n  //     sdfTableKys.map((value, i) => {\r\n  //       return (\r\n  //         <th\r\n  //           key={i}\r\n  //           colSpan={1}\r\n  //           className=\" border pe-2 pt-3 ps-3 table2Bottom\"\r\n  //           scope=\"col\"\r\n  //         >\r\n  //           {value}\r\n  //         </th>\r\n  //       );\r\n  //     })\r\n  //   );\r\n  // };\r\n  return (\r\n    <Row className=\"mt-4 d-flex\">\r\n      <Col sm={12} md={12}>\r\n        <DataTable {...rest} />\r\n      </Col>\r\n      {/* <Col sm={3} md={3}>\r\n        <table className=\"mt-4 table table-bordered\">\r\n          <thead class=\"thead-dark\">\r\n            <tr>\r\n              <th>Total Sum</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td>{rest?.total}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </Col> */}\r\n      {/* <div className=\"row addmarginTopfortablegrouping\">\r\n        <div className=\"col-sm-10 d-flex\">\r\n          <DataTable tableRef={tableRef} {...rest} />\r\n        </div>\r\n        <div className=\"col-sm-2 text-center\">\r\n          <table className=\"table table-bordered\">\r\n            <thead class=\"thead-dark\">\r\n              <tr>\r\n                <th>Total Sum</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td>{rest?.total}</td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div> */}\r\n    </Row>\r\n    // <div className=\"row addyeartabletop\">\r\n    //   <div className=\"col-sm-12 table-responsive-xl \">\r\n    //     <table className=\"table table-bordered table-striped\">\r\n    //       <thead>\r\n    //         <th className=\"text-center\" scope=\"row\">\r\n    //           <span className=\"yearMonthcolor\">{t(\"Year-Month\")}</span>\r\n    //           <span className=\"arrowSize\">→</span>\r\n    //         </th>\r\n    //         {bindTablehead()}\r\n    //         <th\r\n    //           colSpan={1}\r\n    //           className=\"pe-2 pt-3 ps-3 border table2Bottom\"\r\n    //           scope=\"col\"\r\n    //         >\r\n    //           {t(\"Total sum Demand and Forecast\")}\r\n    //         </th>\r\n    //       </thead>\r\n    //       <tbody>\r\n    //         <tr>\r\n    //           <th className=\"text-center  rowFontcolor\" scope=\"row\">\r\n    //             {t(\"Demand Volume\")}\r\n    //           </th>\r\n    //           {addDemandvolueData()}\r\n    //           <td className=\"border\" colSpan={1}></td>\r\n    //         </tr>\r\n    //         <tr>\r\n    //           <th className=\"text-center rowFontcolor\" scope=\"row\">\r\n    //             {t(\"SDF Modified forecast\")}\r\n    //           </th>\r\n    //           {addSdfmodifiedforecast()}\r\n    //           <td className=\"border\" colSpan={1}>\r\n    //             {displayTotalsum.toFixed(2)}\r\n    //           </td>\r\n    //         </tr>\r\n    //         <tr>\r\n    //           <th className=\"text-center rowFontcolor\" scope=\"row\">\r\n    //             {t(\"SDF forcast\")}\r\n    //           </th>\r\n    //           {addSdfForecast()}\r\n    //           <td className=\"border\" colSpan={1}></td>\r\n    //         </tr>\r\n    //       </tbody>\r\n    //     </table>\r\n    //   </div>\r\n    //  </div>\r\n\r\n    //   <div className=\"row mt-4\">\r\n    //     <div className=\"col-sm-12\">\r\n    //       <DataTable tableRef={tableRef} {...rest} />\r\n    //     </div>\r\n    //   </div>\r\n  );\r\n};\r\nexport default YearMonthtablecomponent;\r\n","import { isEmpty } from \"lodash\";\r\nimport React from \"react\";\r\nimport { default as ReactSelect } from \"react-select\";\r\n\r\nconst MySelect = (props) => {\r\n  if (props.allowSelectAll) {\r\n    return (\r\n      <ReactSelect\r\n        {...props}\r\n        options={[props.allOption, ...props.options]}\r\n        onChange={(selected) => {\r\n          const isAllSelected = selected.find((e) => e.value === \"*\");\r\n          if (!isEmpty(isAllSelected)) {\r\n            return props.onChange(props.options);\r\n          }\r\n          return props.onChange(selected);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return <ReactSelect {...props} />;\r\n};\r\n\r\nMySelect.defaultProps = {\r\n  allOption: {\r\n    label: \"Select all...\",\r\n    value: \"*\",\r\n  },\r\n};\r\n\r\nexport default MySelect;\r\n","import React from \"react\";\r\nimport MySelect from \"../React-Select\";\r\n\r\nconst MainSelect = ({ options, onChange, value, ...rest }) => {\r\n  return (\r\n    <MySelect\r\n      options={options}\r\n      closeMenuOnSelect={false}\r\n      hideSelectedOptions={false}\r\n      onChange={onChange}\r\n      value={value}\r\n      {...rest}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MainSelect;\r\n","import { Button, Col, Row } from \"react-bootstrap\";\r\n\r\nimport \"../css/Tablegrouping.css\";\r\nimport { columnFields } from \"../Utils/agGridUtils\";\r\nimport MainSelect from \"./Common/MainSelect\";\r\nimport DataTable from \"./DataTable\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { useEffect } from \"react\";\r\nimport Stack from \"react-bootstrap/Stack\";\r\nimport moment from \"moment\";\r\n// import Row from \"react-bootstrap/Row\";\r\n// import Col from \"react-bootstrap/Col\";\r\nexport const Tablegrouping = ({\r\n  handleSelectChange,\r\n  downloadTableData,\r\n  submitSelection,\r\n  tempSave,\r\n  saveDfuTable,\r\n  tableRef,\r\n  submitBtnDisabled,\r\n  ...rest\r\n}) => {\r\n  const { t, i18n } = useTranslation();\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    i18n.changeLanguage(window.sessionStorage.getItem(\"language\"));\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Row className=\"mb-5\">\r\n        <Col sm={12} md={12} className=\"mt-4\">\r\n          <span className=\"table-grouping-heading\">{t(\"TABLE GROUPING\")}</span>\r\n        </Col>\r\n\r\n        <Col sm={12} md={12} className=\"px-4\">\r\n          <Row className=\"border shadow p-4\">\r\n            <Col sm={12} md={12} className=\"addcolumnDatainsideborder\">\r\n              {t(\"COLUMNS TO INCLUDE / EXCLUDE\")}\r\n            </Col>\r\n\r\n            <Stack direction=\"horizontal\" gap={2}>\r\n              <div style={{ width: \"100%\" }}>\r\n                <MainSelect\r\n                  options={columnFields.filter((e) => e.text)}\r\n                  onChange={handleSelectChange}\r\n                  isMulti\r\n                  allowSelectAll\r\n                  {...rest}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"ms-auto\">\r\n                <Button\r\n                  disabled={submitBtnDisabled}\r\n                  onClick={submitSelection}\r\n                  variant=\"info\"\r\n                  className=\"table-btns\"\r\n                >\r\n                  {t(\"Submit\")}\r\n                </Button>\r\n              </div>\r\n            </Stack>\r\n\r\n            <Col sm={12} md={12} style={{ marginTop: \"4em\" }}>\r\n              <Stack direction=\"horizontal\" gap={2}>\r\n                <div className=\"table-grouping-heading\">{t(\"DFUS TABLE\")}</div>\r\n                <div className=\"ms-auto\">\r\n                  <Button\r\n                    variant=\"info\"\r\n                    className=\"table-btns\"\r\n                    size=\"sm\"\r\n                    disabled={!rest.rowData.length}\r\n                    onClick={() => rest.exportDfu()}\r\n                  >\r\n                    {t(\"Export\")}\r\n                  </Button>\r\n                </div>\r\n\r\n                <div>\r\n                  <Button\r\n                    variant=\"info\"\r\n                    className=\"table-btns\"\r\n                    size=\"sm\"\r\n                    disabled={!rest.rowData.length}\r\n                    onClick={rest?.undo}\r\n                  >\r\n                    {\" \"}\r\n                    {t(\"Undo Changes\")}\r\n                  </Button>\r\n                </div>\r\n\r\n                <div>\r\n                  <Button\r\n                    variant=\"info\"\r\n                    className=\"table-btns\"\r\n                    size=\"sm\"\r\n                    disabled={!rest.rowData.length}\r\n                    onClick={rest?.redo}\r\n                  >\r\n                    {\" \"}\r\n                    {t(\"Redo Changes\")}\r\n                  </Button>\r\n                </div>\r\n\r\n                <div>\r\n                  <Button\r\n                    variant=\"info\"\r\n                    className=\"table-btns\"\r\n                    size=\"sm\"\r\n                    disabled={\r\n                      !rest.rowData.length ||\r\n                      rest.dfuTableTotalCount === rest.rowData.length\r\n                    }\r\n                    onClick={() => rest.handleNextPagination()}\r\n                  >\r\n                    {t(\"Load More\")}\r\n                  </Button>\r\n                </div>\r\n              </Stack>\r\n            </Col>\r\n\r\n            <Col sm={12} md={12} style={{ minHeight: \"50em\" }}>\r\n              <DataTable {...rest} />\r\n\r\n              <Row>\r\n                <Col sm={12} md={12} className=\"mt-2\">\r\n                  <Stack direction=\"horizontal\" gap={2}>\r\n                    <div>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        className=\"table-btns\"\r\n                        size=\"sm\"\r\n                        onClick={tempSave}\r\n                      >\r\n                        {t(\"Save Changes\")}\r\n                      </Button>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        className=\"table-btns\"\r\n                        size=\"sm\"\r\n                        onClick={saveDfuTable}\r\n                      >\r\n                        {t(\"Publish Changes\")}\r\n                      </Button>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Button\r\n                        variant=\"info\"\r\n                        className=\"table-btns\"\r\n                        size=\"sm\"\r\n                        onClick={downloadTableData}\r\n                      >\r\n                        {t(\"Download Client Format Table\")}\r\n                      </Button>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <Button\r\n                        disabled={!rest.rowData.length}\r\n                        variant=\"info\"\r\n                        className=\"table-btns\"\r\n                        size=\"sm\"\r\n                        onClick={() => rest.setShowAddModal(true)}\r\n                      >\r\n                        {t(\"Add DFU\")}\r\n                      </Button>\r\n                    </div>\r\n                  </Stack>\r\n                </Col>\r\n\r\n                <Col sm={12} md={12}>\r\n                  <Row className=\"mt-4\">\r\n                    <Col sm={12} md={12} className=\"tableGroupingfontcolor\">\r\n                      {t(\"Last save was made\") +\r\n                        \" \" +\r\n                        moment(\r\n                          window.sessionStorage.getItem(\"updated date\") ||\r\n                            new Date()\r\n                        ).fromNow()}\r\n                    </Col>\r\n\r\n                    <Col sm={12} md={12} className=\"mt-2\">\r\n                      <span className=\"addDFUfontstyle\">*DFU</span>\r\n                      <span>\r\n                        {t(\r\n                          \"=Demand Forecasting Unit - the unique identifier to forecast.It is composed by a unique combination of the following fields:material_codeshipto_code.\"\r\n                        )}\r\n                      </span>\r\n                    </Col>\r\n                  </Row>\r\n                </Col>\r\n              </Row>\r\n            </Col>\r\n          </Row>\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* <div className=\"row addmarginTopfortablegrouping\">\r\n        <div className=\"col-sm-12\">\r\n          <div className=\"row tablGroupingfontcriteria allFontcolor\">\r\n            {t(\"TABLE GROUPING\")}\r\n          </div>\r\n          <div className=\"row border shadow addmargintopforcolumnseperation \">\r\n            <div className=\"addingColumnspacebetween\">\r\n              <div className=\"row addcolumnDatainsideborder\">\r\n                {t(\"COLUMNS TO INCLUDE / EXCLUDE\")}\r\n              </div>\r\n              <Row className=\"addMarginfordropdown\">\r\n                <Col sm={10}>\r\n                  <MainSelect\r\n                    options={columnFields.filter((e) => e.text)}\r\n                    onChange={handleSelectChange}\r\n                    isMulti\r\n                    allowSelectAll\r\n                    {...rest}\r\n                  />\r\n                </Col>\r\n                <Col sm={2}>\r\n                  <Button\r\n                    disabled={submitBtnDisabled}\r\n                    onClick={submitSelection}\r\n                    style={{ background: \"rgba(4, 187, 241, 1) \" }}\r\n                  >\r\n                    {t(\"Submit\")}\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-6  addAttributetomargintopData allFontcolor\">\r\n              {t(\"DFUS TABLE\")}\r\n            </div>\r\n            <div\r\n              className=\"col-sm-6 text-end addAttributetomargintopData\"\r\n              style={{ paddingBottom: \"12px\" }}\r\n            >\r\n              <button\r\n                disabled={!rest.rowData.length}\r\n                onClick={() => rest.exportDfu()}\r\n                className=\"btn buttonClr refreData\"\r\n              >\r\n                {t(\"Export\")}\r\n              </button>\r\n              <button\r\n                disabled={!rest.rowData.length}\r\n                onClick={() => tableRef?.current?.api?.undoCellEditing()}\r\n                className=\"btn buttonClr refreData\"\r\n              >\r\n                {t(\"Undo Changes\")}\r\n              </button>\r\n              <button\r\n                disabled={!rest.rowData.length}\r\n                onClick={() => tableRef?.current?.api?.redoCellEditing()}\r\n                className=\"btn buttonClr refreData\"\r\n              >\r\n                {t(\"Redo Changes\")}\r\n              </button>\r\n              <button\r\n                disabled={\r\n                  !rest.rowData.length ||\r\n                  rest.dfuTableTotalCount === rest.rowData.length\r\n                }\r\n                onClick={() => rest.handleNextPagination()}\r\n                className=\"btn buttonClr refreData\"\r\n              >\r\n                {t(\"Load More\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          <DataTable tableRef={tableRef} {...rest} />\r\n\r\n          <div className=\"row addfooterPaddingleft\">\r\n            <div className=\"col-sm-9\">\r\n              <button onClick={tempSave} className=\"btn buttonClr saveChanges \">\r\n                Save Changes\r\n              </button>\r\n              <button\r\n                onClick={saveDfuTable}\r\n                className=\"btn buttonClr saveChanges \"\r\n              >\r\n                Publish Changes\r\n              </button>\r\n              <button\r\n                onClick={downloadTableData}\r\n                className=\"btn buttonClr downloadCli\"\r\n              >\r\n                Download Client Format Table\r\n              </button>\r\n\r\n              <button\r\n                disabled={!rest.rowData.length}\r\n                onClick={() => rest.setShowAddModal(true)}\r\n                className=\"btn buttonClr addDfu\"\r\n              >\r\n                {t(\"Add DFU\")}\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"row addMargintopforbottomTable\">\r\n            <div className=\" col-sm-8  tableGroupingfontcolor\">\r\n              {t(\"Last save was made 117 minutes ago\")}\r\n            </div>\r\n          </div>\r\n          <div className=\"row addfooterPaddingleft addDemandmargintop\">\r\n            <div className=\"col-sm-12\">\r\n              <span className=\"addDFUfontstyle\">*DFU</span>\r\n              <span>\r\n                {t(\r\n                  \"=Demand Forecasting Unit - the unique identifier to forecast.It is composed by a unique combination of the following fields:material_codeshipto_code.\"\r\n                )}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div> */}\r\n    </>\r\n  );\r\n};\r\n","import { Container, Form } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useEffect } from \"react\";\r\nimport {\r\n  actionQuickFilterChange,\r\n  actionSetTimeFilterSelection,\r\n  defaultValueChange,\r\n  fetchAllFilters,\r\n} from \"../../redux/Actions/QuickFilterData\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nimport YearlytotalVolumes from \"../YearlytotalVolumes\";\r\n\r\nimport {\r\n  convertToMillion,\r\n  getDemandInputDates,\r\n  getFcDemandInputDates,\r\n  getYTDInputDates,\r\n} from \"../../Utils\";\r\nimport moment from \"moment\";\r\nconst KPI = ({ filterData, volumes, obsolete, name, timeFilterDates }) => {\r\n  const dispatch = useDispatch();\r\n  const handleObsChange = (e) => {\r\n    e.preventDefault();\r\n    const obsolete = e.target.value;\r\n    dispatch(\r\n      actionQuickFilterChange({\r\n        rangeSelection: false,\r\n        rangeName: null,\r\n      })\r\n    );\r\n    dispatch(defaultValueChange({ obsolete }));\r\n  };\r\n  const Location = useLocation();\r\n  const { t, i18n } = useTranslation();\r\n  const filterType = String(name);\r\n  useEffect(() => {\r\n    i18n.changeLanguage(window.sessionStorage.getItem(\"language\"));\r\n  }, []);\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <div className=\"row\">\r\n        <div className=\"col-sm-12 p-0\">\r\n          {/* <div className=\"row kpsFontcolor addKPISproperty\">{t('KPIS')}</div> */}\r\n          <span className=\"addKPISproperty\">{t(\"KPIS\")}</span>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"row border shadow addquickmarginStart quickFilter\"> */}\r\n      <div className=\"row border shadow quickFilter\">\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-2  quickFilterfontcolor addquickFilterFontsize\">\r\n            {t(\"QUICK FILTERS\")}\r\n          </div>\r\n          <div className=\"col-md-2 allquickattribute\">\r\n            {/* <div className=\"kpsFontcolor addquickFilterFontsize\"> YTD</div> */}\r\n            <button\r\n              className={\r\n                filterType === \"YTD\"\r\n                  ? \"btn btn-default  ChangequickColorbutton\"\r\n                  : \"btn btn-default quickDropdown\"\r\n              }\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                // const [name, filterBody] = [\r\n                //   \"YTD\",\r\n                //   {\r\n                //     filter: { YTD: [\"Mar \" + 2021] },\r\n                //   },\r\n                // ];\r\n                // dispatch(actionSetTimeFilterSelection(\"YTD\"));\r\n                dispatch(\r\n                  actionQuickFilterChange({\r\n                    rangeSelection: false,\r\n                    rangeName: null,\r\n                  })\r\n                );\r\n                dispatch(\r\n                  defaultValueChange({\r\n                    filterBody: getYTDInputDates,\r\n                    name: \"YTD\",\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              YTD\r\n            </button>\r\n          </div>\r\n          <div className=\"col-md-2 allquickattribute\">\r\n            {/* <div className=\"kpsFontcolor addquickFilterFontsize \">\r\n                FC NEXT 6M\r\n              </div> */}\r\n            <button\r\n              className={\r\n                filterType === \"forecastNext6M\"\r\n                  ? \"btn btn-default ChangequickColorbutton\"\r\n                  : \"btn btn-default quickDropdown\"\r\n              }\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                // const [name, filterBody] = [\r\n                //   \"forecastNext6M\",\r\n                //   {\r\n                //     filter: {\r\n                //       forecastNext6M: [\"Jul \" + CurrentDateValue[3]],\r\n                //     },\r\n                //   },\r\n                // ];\r\n                // dispatch(actionSetTimeFilterSelection(\"forecastNext6M\"));\r\n                dispatch(\r\n                  actionQuickFilterChange({\r\n                    rangeSelection: false,\r\n                    rangeName: null,\r\n                  })\r\n                );\r\n                dispatch(\r\n                  defaultValueChange({\r\n                    filterBody: getFcDemandInputDates,\r\n                    name: \"forecastNext6M\",\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              FC NEXT 6M\r\n            </button>\r\n          </div>\r\n          <div className=\"col-md-3 allquickattribute\">\r\n            {/* <div className=\"kpsFontcolor addquickFilterFontsize \">\r\n                DEMAND LAST 6M\r\n              </div> */}\r\n            <button\r\n              className={\r\n                filterType === \"demandLast12M\"\r\n                  ? \"btn btn-default ChangequickColorbutton\"\r\n                  : \"btn btn-default quickDropdown\"\r\n              }\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                // const [name, filterBody] = [\r\n                //   \"demandLast12M\",\r\n                //   {\r\n                //     filter: {\r\n                //       demandLast12M: [\"Jul \" + CurrentDateValue[3]],\r\n                //     },\r\n                //   },\r\n                // ];\r\n                // dispatch(actionSetTimeFilterSelection(\"demandLast12M\"));\r\n                dispatch(\r\n                  actionQuickFilterChange({\r\n                    rangeSelection: false,\r\n                    rangeName: null,\r\n                  })\r\n                );\r\n                dispatch(\r\n                  defaultValueChange({\r\n                    filterBody: getDemandInputDates(\r\n                      timeFilterDates.demandFilterEndDate\r\n                    ),\r\n                    name: \"demandLast12M\",\r\n                  })\r\n                );\r\n              }}\r\n            >\r\n              DEMAND LAST 12M\r\n            </button>\r\n          </div>\r\n          <div className=\"col-md-3 allquickattribute\">\r\n            {/* <div className=\"kpsFontcolor addquickFilterFontsize\">\r\n                INCLUDE OBSOLETE DFU\r\n              </div> */}\r\n            {/* <select className=\"IncludeobsoluteDFU\">\r\n                <option selected>YES</option>\r\n                <option selected>NO</option>\r\n              </select> */}\r\n            <Form.Control\r\n              as=\"select\"\r\n              className=\"IncludeobsoluteDFU\"\r\n              aria-label=\"Select OBSOLETE DFU\"\r\n              onChange={(e) => handleObsChange(e)}\r\n              value={obsolete}\r\n            >\r\n              <option value=\"Yes\">Obsolete Yes</option>\r\n              <option value=\"No\">Obsolete No</option>\r\n            </Form.Control>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <Row className=\"mt-4\">\r\n        <Col sm={2} md={2} className=\"p-0 align-items-stretch mb-4\">\r\n          <div className=\"border shadow\" style={{ height: \"11.4em\" }}>\r\n            <Row className=\"p-1 align-items-center\">\r\n              <Col\r\n                xs={3}\r\n                sm={3}\r\n                md={3}\r\n                className=\"DemandandFcfonts allFontcolor\"\r\n              >\r\n                DEMAND\r\n              </Col>\r\n\r\n              <Col\r\n                xs={9}\r\n                sm={9}\r\n                md={9}\r\n                className=\"text-end DemandandFcfontsRight allFontcolor\"\r\n              >\r\n                {`${moment(timeFilterDates?.demandStartDate).format(\r\n                  \"YYYY-MM\"\r\n                )} To ${moment(timeFilterDates?.demandEndDate).format(\r\n                  \"YYYY-MM\"\r\n                )}`}\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row className=\"margintop2\">\r\n              <Col sm={12} md={12} className=\"col-sm-12 text-center\">\r\n                <div className=\"addFontforcenterData\">\r\n                  {filterData?.demandPeriodTotal\r\n                    ? convertToMillion(filterData?.demandPeriodTotal)\r\n                    : 0}\r\n                </div>\r\n                <div className=\"addDemandvolumestyle\">{t(\"DEMAND VOLUME\")}</div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Col>\r\n\r\n        <Col sm={4} md={4} className=\"align-items-stretch mb-4\">\r\n          <div className=\"border shadow\" style={{ height: \"11.4em\" }}>\r\n            <Row className=\"p-1 align-items-center\">\r\n              <Col\r\n                xs={5}\r\n                sm={5}\r\n                md={5}\r\n                className=\"DemandandFcfonts allFontcolor\"\r\n              >\r\n                {t(\"FC DEMAND\")}\r\n              </Col>\r\n\r\n              <Col\r\n                xs={7}\r\n                sm={7}\r\n                md={7}\r\n                className=\"text-end DemandandFcfontsRight allFontcolor\"\r\n              >\r\n                {`${moment(timeFilterDates?.forecastStartDate).format(\r\n                  \"YYYY-MM\"\r\n                )} To ${moment(timeFilterDates?.forecastEndDate).format(\r\n                  \"YYYY-MM\"\r\n                )}`}\r\n              </Col>\r\n            </Row>\r\n\r\n            <Row className=\"margintop2\">\r\n              <Col sm=\"6\" xs={6} className=\"text-center\">\r\n                <div className=\"addFontforcenterData\">{`${\r\n                  filterData?.forecastEnriched\r\n                    ? convertToMillion(filterData?.forecastEnriched)\r\n                    : 0\r\n                }`}</div>\r\n                <div className=\"addDemandvolumestyle\">\r\n                  {t(\"SDF FORECAST VOLUME\")}\r\n                </div>\r\n              </Col>\r\n\r\n              <Col sm=\"6\" xs={6} className=\"text-center\">\r\n                <div className=\"addFontforcenterData\">{`${\r\n                  filterData?.forecastQty\r\n                    ? convertToMillion(filterData?.forecastQty)\r\n                    : 0\r\n                }`}</div>\r\n                <div className=\"addDemandvolumestyle\">\r\n                  {t(\"SDF MODIFIED FORECAST VOLUME\")}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Col>\r\n\r\n        <Col sm={6} md={6} className=\"align-items-stretch\">\r\n          <YearlytotalVolumes volumes={volumes} />\r\n        </Col>\r\n      </Row>\r\n\r\n      {/* <div className=\"row addMArgintopfordemandandForecast\">\r\n        <div className=\"col-md-4 align-items-stretch addPaddingstart\">\r\n          <div className=\"border shadow\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-3 text-left DemandandFcfonts allFontcolor\">\r\n                DEMAND\r\n              </div>\r\n              <div className=\"col-md-9 text-end DemandandFcfontsRight addpadleft allFontcolor\">\r\n                2020-05 to 2021-04\r\n              </div>\r\n            </div>\r\n            <div className=\"row margintop2\">\r\n              <div className=\"col-sm-12 text-center\">\r\n                <div className=\"addFontforcenterData\">\r\n                  {`${filterData?.Demandvolume ?? 0}M`}\r\n                </div>\r\n                <div className=\"addDemandvolumestyle\">{t(\"DEMAND VOLUME\")}</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-8 align-items-stretch addPaddingend\">\r\n          <div className=\"border shadow\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-5 text-left DemandandFcfonts allFontcolor\">\r\n                {t('FC DEMAND')}\r\n              </div>\r\n              <div className=\"col-md-7 text-end DemandandFcfontsRight  allFontcolor\">\r\n                2021-05 TO 2021-12\r\n              </div>\r\n            </div>\r\n            <div className=\"row margintop2\">\r\n              <div className=\"col-sm-6 text-center\">\r\n                <div className=\"addFontforcenterData\">{`${filterData?.ForecastVolume\r\n                  ? filterData?.ForecastVolume[0][\"SDFForecast\"]\r\n                  : 0\r\n                  }`}</div>\r\n                <div className=\"addDemandvolumestyle\">{t('SDF FORECAST VOLUME')}</div>\r\n              </div>\r\n              <div className=\"col-sm-6 text-center\">\r\n                <div className=\"addFontforcenterData\">{`${filterData?.ForecastVolume\r\n                  ? filterData?.ForecastVolume[0][\"SDFMofifiedForecast\"]\r\n                  : 0\r\n                  }`}</div>\r\n                <div className=\"addDemandvolumestyle\">\r\n                  {t('SDF MODIFIED FORECAST VOLUME')}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\nexport default KPI;\r\n","import { Button, Col, Form, Modal, Row } from \"react-bootstrap\";\r\nimport { columnFields } from \"../../../Utils/agGridUtils\";\r\n\r\nconst AddRowModal = (props) => {\r\n  const {\r\n    show,\r\n    handleClose,\r\n    heading,\r\n    handleSubmit,\r\n    dfuAddRowData,\r\n    handleChange,\r\n    addDfuDropDownOption,\r\n  } = props;\r\n  return (\r\n    <Modal\r\n      show={show}\r\n      onHide={handleClose}\r\n      size=\"lg\"\r\n      aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n    >\r\n      <Modal.Header closeButton>\r\n        <Modal.Title>{heading}</Modal.Title>\r\n      </Modal.Header>\r\n      <Modal.Body>\r\n        <form id=\"addDfuForm\" onSubmit={handleSubmit}>\r\n          <>\r\n            <Row>\r\n              <Col sm={1} />\r\n              <Col sm={4} style={{ padding: \"5px\" }}>\r\n                <Form.Control\r\n                  onChange={(e) => handleChange(e)}\r\n                  size=\"sm\"\r\n                  type=\"date\"\r\n                  name=\"startDate\"\r\n                  value={dfuAddRowData[\"startDate\"] ?? \"\"}\r\n                  required\r\n                />\r\n              </Col>\r\n              <Col sm={4} style={{ margin: \"5px\" }}>\r\n                <Form.Control\r\n                  onChange={(e) => handleChange(e)}\r\n                  size=\"sm\"\r\n                  type=\"date\"\r\n                  name=\"endDate\"\r\n                  value={dfuAddRowData[\"endDate\"] ?? \"\"}\r\n                  required\r\n                />\r\n              </Col>\r\n\r\n              {columnFields.map((field, i) => (\r\n                <Form.Group\r\n                  key={i}\r\n                  style={{ margin: \"5px\" }}\r\n                  as={Row}\r\n                  controlId={`${i}_${field.value}`}\r\n                >\r\n                  <Col sm={4}>\r\n                    <Form.Label>\r\n                      <b>{field.label}</b>\r\n                    </Form.Label>\r\n                  </Col>\r\n                  <Col sm={3}>\r\n                    {field.select && (\r\n                      <Form.Select\r\n                        onChange={(e) => {\r\n                          e.preventDefault();\r\n                          handleChange({\r\n                            target: {\r\n                              name: field.value,\r\n                              value: e.target.value,\r\n                            },\r\n                          });\r\n                        }}\r\n                        size=\"sm\"\r\n                        aria-label=\"select options\"\r\n                      >\r\n                        <option value={\"\"}>Select {field.label}</option>\r\n                        {addDfuDropDownOption[field.option ?? field.value].map(\r\n                          (option, index) => (\r\n                            <option\r\n                              key={`${field.value}_${index}_`}\r\n                              value={option}\r\n                            >\r\n                              {option}\r\n                            </option>\r\n                          )\r\n                        )}\r\n                      </Form.Select>\r\n                    )}\r\n                  </Col>\r\n                  <Col sm={4}>\r\n                    <Form.Control\r\n                      onChange={(e) => handleChange(e)}\r\n                      size=\"sm\"\r\n                      type=\"text\"\r\n                      name={field.value}\r\n                      value={dfuAddRowData[field.value] ?? \"\"}\r\n                      required\r\n                    />\r\n                  </Col>\r\n                </Form.Group>\r\n              ))}\r\n            </Row>\r\n          </>\r\n        </form>\r\n      </Modal.Body>\r\n      <Modal.Footer>\r\n        <Button variant=\"secondary\" onClick={handleClose}>\r\n          Close\r\n        </Button>\r\n        <Button form=\"addDfuForm\" type=\"submit\" variant=\"info\">\r\n          ADD DFU\r\n        </Button>\r\n      </Modal.Footer>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default AddRowModal;\r\n","import { useState, useCallback, useEffect, useRef } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { shallowEqual, useSelector, useDispatch } from \"react-redux\";\r\nimport \"../css/Maincomponent.css\";\r\nimport { YearlytotalVolumes } from \"./YearlytotalVolumes\";\r\nimport { TimeFilters } from \"./TimeFilters\";\r\nimport { FilterByforecast } from \"./FilterByforecast\";\r\nimport { Demandvolumeforecast } from \"./DemandVolumeforecastgraph\";\r\nimport { YearMonthtablecomponent } from \"./yearMonthtable\";\r\nimport { Tablegrouping } from \"./Tablegrouping\";\r\nimport {\r\n  actionAppendDFUTableData,\r\n  actionGetTableData,\r\n  actionChangeSubmitAddDFUField,\r\n  actionSubmitAddDFU,\r\n  actionExportDfuTable,\r\n  actionUpdateTableData,\r\n  actionGgetClickedCell,\r\n  actionQuickFilterChange,\r\n} from \"../redux/Actions/QuickFilterData\";\r\nimport {\r\n  columnFields,\r\n  defaultActions,\r\n  defaultColDef,\r\n  defaultSDFActions,\r\n  defaultSDFTbleColDef,\r\n  defaultTake,\r\n} from \"../Utils/agGridUtils\";\r\nimport KPI from \"./KPIComponent\";\r\nimport {\r\n  actionDownloadDFUTable,\r\n  actionSaveDFUTable,\r\n} from \"../redux/Actions/FinalSubmission\";\r\nimport { actionUpdatePlotData } from \"../redux/Actions/PlotData\";\r\nimport AddRowModal from \"./Common/AddRowModal\";\r\n\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\n\r\nexport const Holcimuimaincomponent = () => {\r\n  const dispatch = useDispatch();\r\n  // const [selectedTableColumns, setSelectedTableColumns] = useState(\r\n  //   columnFields.filter((e) => e.value !== \"quantity\")\r\n  // );\r\n  const {\r\n    demandFilterData,\r\n    foreCastFilterData,\r\n    tableData,\r\n    filterData,\r\n    plotData,\r\n    defaultData,\r\n    dates,\r\n    dfuTableCols,\r\n    dfuTableTotalCount,\r\n    dfuAddRowData,\r\n    sdfTableKys,\r\n    savePlotDataTableRows,\r\n    sdfTableTotalSum,\r\n    addDfuDropDownOption,\r\n    tableDataCopy,\r\n    clickedCell,\r\n    tableDropDownFilters,\r\n    selectedTableColumns,\r\n    state,\r\n  } = useSelector(\r\n    (state) => ({\r\n      demandFilterData: state.quickFilterData.demandFilterData,\r\n      foreCastFilterData: state.quickFilterData.foreCastFilterData,\r\n      tableData: state.quickFilterData.tableData,\r\n      getDataplot: state.plotDataReducer ?? [],\r\n      filterData: state.quickFilterData.quickFilterData,\r\n      plotData: state.plotData.plotData,\r\n      defaultData: state.quickFilterData.quickFilterDefaultData,\r\n      dates: state.quickFilterData.quickFilterDates,\r\n      dfuTableCols: state.quickFilterData.dfuTableCols,\r\n      dfuTableTotalCount: state.quickFilterData.dfuTableTotalCount,\r\n      dfuAddRowData: state.quickFilterData.dfuAddRowData,\r\n      sdfTableKys: state.plotData.sdfTableKys,\r\n      savePlotDataTableRows: state.plotData.savePlotDataTableRows,\r\n      sdfTableTotalSum: state.plotData.sdfTableTotalSum,\r\n      addDfuDropDownOption: state.quickFilterData.addDfuDropDownOption,\r\n      tableDataCopy: state.quickFilterData.tableDataCopy,\r\n      clickedCell: state.quickFilterData.clickedCell,\r\n      tableDropDownFilters: state.quickFilterData.tableDropDownFilters,\r\n      selectedTableColumns: state.quickFilterData.selectedTableColumns,\r\n      state: state,\r\n    }),\r\n    shallowEqual\r\n  );\r\n  const tableRef = useRef();\r\n  const [dfuTableApi, setDfuTableApi] = useState();\r\n  const [showAddModal, setShowAddModal] = useState(false);\r\n  const [tempDfuTable, setTempDfuTable] = useState([]);\r\n  const tt = useRef([]);\r\n  const dfuTableRef = useRef([]);\r\n\r\n  console.log({ state });\r\n\r\n  const handleSelectChange = useCallback((e) => {\r\n    // setSelectedTableColumns(e);\r\n    dispatch(actionQuickFilterChange({ selectedTableColumns: e }));\r\n  }, []);\r\n\r\n  const submitSelection = (e) => {\r\n    e.preventDefault();\r\n    // const body = {\r\n    //   excludedColumns: selectedTableColumns.map((e) => e?.value),\r\n    //   Dates: dates,\r\n    //   filter: tableDropDownFilters,\r\n    //   obsolete: defaultData.obsolete === \"Yes\",\r\n    // };\r\n    dispatch(actionGetTableData());\r\n  };\r\n\r\n  const downloadTableData = () => {\r\n    dispatch(actionDownloadDFUTable(toast));\r\n  };\r\n\r\n  const saveDfuTable = (e) => {\r\n    e.preventDefault();\r\n    dispatch(actionSaveDFUTable(tt.current, dfuTableRef.current, toast));\r\n    tt.current = [];\r\n    dfuTableRef.current = [];\r\n    // dispatch(actionSaveDFUTable(tempDfuTable, toast));\r\n  };\r\n\r\n  const temperoryTableSave = () => {\r\n    // const temp = cloneDeep(tableData);\r\n    if (tt.current.length) {\r\n      tt.current.forEach((item) => {\r\n        dispatch(actionUpdatePlotData(item));\r\n      });\r\n    }\r\n    // console.log(tt.current);\r\n  };\r\n  const handleDFUPagination = () => {\r\n    const body = {\r\n      excludedColumns: selectedTableColumns.map((e) => e?.value),\r\n      Dates: dates,\r\n      filter: tableDropDownFilters,\r\n      obsolete: defaultData.obsolete === \"Yes\",\r\n    };\r\n    dispatch(actionAppendDFUTableData(body));\r\n  };\r\n\r\n  const onGridReady = useCallback((params) => {\r\n    setDfuTableApi(params.api);\r\n  }, []);\r\n\r\n  const handleAddModalClose = useCallback(() => {\r\n    setShowAddModal((prev) => !prev);\r\n  }, [showAddModal]);\r\n\r\n  const submitDfuForm = (e) => {\r\n    e.preventDefault();\r\n    const obs = defaultData.obsolete === \"Yes\";\r\n    dispatch(\r\n      actionSubmitAddDFU(dfuAddRowData, dates, tableDropDownFilters, obs)\r\n    );\r\n  };\r\n  const handleFieldChange = useCallback((e) => {\r\n    const { name, value } = e.target;\r\n\r\n    // if (tt.current) {\r\n    //   clearTimeout(tt.current);\r\n    // }\r\n    // tt.current = setTimeout(() => {\r\n    //   dispatch(actionChangeSubmitAddDFUField(name, value));\r\n    // }, 200);\r\n    dispatch(actionChangeSubmitAddDFUField(name, value));\r\n  }, []);\r\n\r\n  const exportDfuTable = () => {\r\n    const body = {\r\n      excludedColumns: selectedTableColumns.map((e) => e?.value),\r\n      Dates: dates,\r\n    };\r\n    dispatch(actionExportDfuTable(body, toast));\r\n  };\r\n\r\n  const handleSdfTableChange = (e) => {\r\n    const dfuExist = dfuTableRef.current.findIndex(\r\n      (f) => f.colDef.field === e.colDef.field\r\n    );\r\n    if (dfuExist === -1) {\r\n      dfuTableRef.current = [...dfuTableRef.current, e];\r\n    } else {\r\n      dfuTableRef.current[dfuExist] = e;\r\n    }\r\n\r\n    dispatch(actionUpdateTableData(e));\r\n  };\r\n\r\n  const handleCellChange = (e) => {\r\n    // dispatch(actionUpdatePlotData(e));\r\n    // setTempDfuTable((prev) => [...prev, e]);\r\n    // if (!rowExist) {\r\n    // if (tt.current?.length) {\r\n    //   tt.current = tt.current.map((item) =>\r\n    //     item.rowIndex === e.rowIndex ? e : item\r\n    //   );\r\n    // } else {\r\n    //   tt.current = [...tt.current, e];\r\n    // }\r\n    [e].forEach((item, i) => {\r\n      const rowExist =\r\n        tableDataCopy[item.rowIndex][item.colDef.field] === item.newValue;\r\n      if (rowExist && tt.current.length) {\r\n        tt.current.splice(tt.current.indexOf(e.colDef.field), 1);\r\n      } else {\r\n        tt.current = [...tt.current, e];\r\n      }\r\n    });\r\n  };\r\n  const undoAgGridCell = (e) => {\r\n    e.preventDefault();\r\n    dfuTableApi.undoCellEditing();\r\n  };\r\n  const redoAgGridCell = (e) => {\r\n    e.preventDefault();\r\n    dfuTableApi.redoCellEditing();\r\n  };\r\n\r\n  const cellClicked = (param) => {\r\n    const col = param.colDef.field;\r\n    dispatch(actionGgetClickedCell(col));\r\n  };\r\n  const handleFilter = (params) => {\r\n    console.log(params);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\">\r\n      <KPI\r\n        filterData={filterData.kpis}\r\n        volumes={filterData.yearlyTotalVolume}\r\n        timeFilterDates={state?.quickFilterData?.timeFilterDates}\r\n        {...defaultData}\r\n      />\r\n      <TimeFilters\r\n        {...defaultData}\r\n        {...state}\r\n        dates={dates}\r\n        demandFilterData={demandFilterData}\r\n        foreCastFilterData={foreCastFilterData}\r\n        totalSum={sdfTableTotalSum}\r\n      />\r\n      {/* <FilterByforecast {...defaultData} /> */}\r\n\r\n      {/* <Demandvolumeforecast\r\n        timeFilterData={plotData}\r\n        updatePlotData={updatePlotData}\r\n      />\r\n\r\n      <YearMonthtablecomponent\r\n        rowData={plotData}\r\n        defaultColDef={defaultColDef}\r\n        tableCols={sdfTableKys}\r\n        defaultActions={defaultSDFActions}\r\n      /> */}\r\n\r\n      <Row>\r\n        <Col sm={6} md={6}>\r\n          <Demandvolumeforecast\r\n            sdfTableKys={sdfTableKys}\r\n            timeFilterData={plotData}\r\n          />\r\n        </Col>\r\n        <Col sm={6} md={6}>\r\n          <YearMonthtablecomponent\r\n            rowData={plotData}\r\n            defaultColDef={defaultSDFTbleColDef}\r\n            tableCols={sdfTableKys.sort(\r\n              (a, b) => new Date(a.value) - new Date(b.value)\r\n            )}\r\n            defaultActions={defaultSDFActions}\r\n            total={sdfTableTotalSum}\r\n            handleCellChange={handleSdfTableChange}\r\n            cellClicked={cellClicked}\r\n            clickedCell={clickedCell}\r\n          />\r\n        </Col>\r\n      </Row>\r\n\r\n      <AddRowModal\r\n        addDfuDropDownOption={addDfuDropDownOption}\r\n        dfuAddRowData={dfuAddRowData}\r\n        show={showAddModal}\r\n        heading=\"Add New DFU\"\r\n        handleClose={handleAddModalClose}\r\n        handleSubmit={submitDfuForm}\r\n        handleChange={handleFieldChange}\r\n      />\r\n      <Tablegrouping\r\n        handleSelectChange={handleSelectChange}\r\n        downloadTableData={downloadTableData}\r\n        submitSelection={submitSelection}\r\n        saveDfuTable={saveDfuTable}\r\n        rowData={tableData}\r\n        defaultColDef={defaultColDef}\r\n        value={selectedTableColumns}\r\n        defaultActions={defaultActions}\r\n        tableRef={tableRef}\r\n        tableCols={dfuTableCols.sort(\r\n          (a, b) => new Date(a.value) - new Date(b.value)\r\n        )}\r\n        submitBtnDisabled={selectedTableColumns.length === 0}\r\n        tempSave={temperoryTableSave}\r\n        handleNextPagination={handleDFUPagination}\r\n        gridReady={onGridReady}\r\n        dfuTableTotalCount={dfuTableTotalCount}\r\n        setShowAddModal={setShowAddModal}\r\n        exportDfu={exportDfuTable}\r\n        handleCellChange={handleCellChange}\r\n        undo={undoAgGridCell}\r\n        redo={redoAgGridCell}\r\n        cellClicked={cellClicked}\r\n        clickedCell={clickedCell}\r\n        handleFilter={handleFilter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default Holcimuimaincomponent;\r\n","import axios from \"axios\";\r\nimport URLConfig from \"../../../URLConfig\";\r\nimport {\r\n  actionQuickFilterChange,\r\n  defaultValueChange,\r\n} from \"../QuickFilterData\";\r\nimport { FINAL_SUBMISSION_TYPES } from \"./finalSubmissionTypes\";\r\n\r\nexport const actionDownloadDFUTable = (callback) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: FINAL_SUBMISSION_TYPES.DOWNLOAD_TABLE_FETCHING,\r\n      });\r\n      const URL = URLConfig.downloadDFUTable();\r\n      const res = await axios.get(URL);\r\n      dispatch({\r\n        type: FINAL_SUBMISSION_TYPES.DOWNLOAD_TABLE_FETCHED,\r\n        payload: res.data.msg,\r\n      });\r\n      callback(res.data.msg);\r\n    } catch (err) {\r\n      dispatch({\r\n        type: FINAL_SUBMISSION_TYPES.DOWNLOAD_TABLE_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport const actionSaveDFUTable = (dfuData, plotData, callback) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({\r\n        type: FINAL_SUBMISSION_TYPES.SAVE_DFU_TABLE_FETCHING,\r\n      });\r\n      let modifiedTableData = [];\r\n      let modifiedPlotData = [];\r\n      if (dfuData.length) {\r\n        modifiedTableData = dfuData.reduce(\r\n          (acc, curr) => [\r\n            ...acc,\r\n            {\r\n              demand_period: curr.colDef.field,\r\n              modifiedForecast: curr.newValue,\r\n              region: curr.data.region,\r\n              channel: curr.data.channel,\r\n              customer_name: curr.data.customer_name,\r\n              material_name: curr.data.material_name,\r\n              package: curr.data.package,\r\n              plant: curr.data.plant,\r\n              ship_to_name: curr.data.ship_to_name,\r\n              sales_rep_name: curr.data.sales_rep_name,\r\n              segment: curr.data.segment,\r\n              del_new: curr.data.del_new,\r\n            },\r\n          ],\r\n          []\r\n        );\r\n      }\r\n      if (plotData.length) {\r\n        modifiedPlotData = plotData.reduce(\r\n          (acc, curr) => [\r\n            ...acc,\r\n            {\r\n              demand_period: curr.colDef.field,\r\n              modifiedForecast: curr.newValue,\r\n            },\r\n          ],\r\n          []\r\n        );\r\n      }\r\n      const URL = URLConfig.saveDFUTable();\r\n      const ob = {\r\n        collbTotalData: modifiedTableData,\r\n        dfuData: modifiedPlotData,\r\n      };\r\n      const res = await axios.put(URL, ob);\r\n      if (res.data.sucess !== undefined && res.data.sucess === 200) {\r\n        window.sessionStorage.setItem(\"updated date\", res.data.date);\r\n      }\r\n      dispatch({\r\n        type: FINAL_SUBMISSION_TYPES.SAVE_DFU_TABLE_FETCHED,\r\n        payload: res.data,\r\n      });\r\n      callback(res.data.message);\r\n\r\n      dispatch(defaultValueChange({ saveTableData: true }));\r\n    } catch (err) {\r\n      dispatch({\r\n        type: FINAL_SUBMISSION_TYPES.SAVE_DFU_TABLE_FAILED,\r\n      });\r\n    }\r\n  };\r\n};\r\n"],"names":["volumes","useTranslation","t","i18n","useEffect","changeLanguage","window","sessionStorage","getItem","Row","Col","sm","md","className","previousYear","convertToMillion","Date","getFullYear","currntYear","nextYear","TimeFilters","props","totalSum","quickFilterData","dispatch","useDispatch","timeFilterDates","quickFilterDefaultData","tableDropDownFilters","Stack","direction","gap","maxDate","demandFilterEndDate","selected","demandStartDate","onChange","dates","start","end","actionTimeFilterChange","actionSelectRange","startDate","endDate","demandEndDate","selectsRange","inline","dateFormat","showMonthYearPicker","shouldCloseOnSelect","minDate","forecastFilterStartDate","forecastStartDate","forecastEndDate","style","fontWeight","createSliderWithTooltip","Slider","Demandvolumeforecast","timeFilterData","sdfTableKys","useState","chartData","setChartData","length","temp","cloneDeep","filterData","map","item","Object","keys","filter","f","reduce","acc","curr","date","value","parseFloat","name","flat","result","w","forecast","find","fc","toLowerCase","dmndVol","modForecast","sort","a","b","lineColors","marginTop","ResponsiveContainer","width","height","LineChart","id","data","margin","top","right","left","bottom","fontSize","Tooltip","Legend","XAxis","dataKey","YAxis","tickFormatter","CartesianGrid","stroke","strokeDasharray","Line","type","rowData","defaultColDef","defaultActions","tableCols","gridReady","handleCellChange","cellClicked","clickedCell","AgGridReact","enableRangeSelection","enableFillHandle","undoRedoCellEditing","enableCellChangeFlash","undoRedoCellEditingLimit","onGridReady","minHight","onCellValueChanged","e","i","AgGridColumn","onCellClicked","suppressSizeToFit","minWidth","headerName","label","editable","params","text","field","YearMonthtablecomponent","rest","MySelect","allowSelectAll","options","allOption","isAllSelected","isEmpty","defaultProps","closeMenuOnSelect","hideSelectedOptions","Tablegrouping","handleSelectChange","downloadTableData","submitSelection","tempSave","saveDfuTable","submitBtnDisabled","tableRef","useNavigate","columnFields","isMulti","Button","disabled","onClick","variant","size","exportDfu","undo","redo","dfuTableTotalCount","handleNextPagination","minHeight","setShowAddModal","moment","fromNow","obsolete","useLocation","filterType","String","preventDefault","actionQuickFilterChange","rangeSelection","rangeName","defaultValueChange","filterBody","getYTDInputDates","getFcDemandInputDates","getDemandInputDates","Form","as","target","handleObsChange","xs","format","demandPeriodTotal","forecastEnriched","forecastQty","show","handleClose","heading","handleSubmit","dfuAddRowData","handleChange","addDfuDropDownOption","Modal","onHide","centered","closeButton","onSubmit","padding","required","controlId","select","option","index","form","Holcimuimaincomponent","useSelector","state","demandFilterData","foreCastFilterData","tableData","getDataplot","plotDataReducer","plotData","defaultData","quickFilterDates","dfuTableCols","savePlotDataTableRows","sdfTableTotalSum","tableDataCopy","selectedTableColumns","shallowEqual","useRef","dfuTableApi","setDfuTableApi","showAddModal","tt","dfuTableRef","console","log","useCallback","api","handleAddModalClose","prev","handleFieldChange","actionChangeSubmitAddDFUField","param","col","colDef","actionGgetClickedCell","kpis","yearlyTotalVolume","defaultSDFTbleColDef","defaultSDFActions","total","dfuExist","current","findIndex","actionUpdateTableData","obs","actionSubmitAddDFU","callback","toast","FINAL_SUBMISSION_TYPES","URL","URLConfig","axios","res","payload","msg","actionGetTableData","dfuData","modifiedTableData","modifiedPlotData","demand_period","modifiedForecast","newValue","region","channel","customer_name","material_name","package","plant","ship_to_name","sales_rep_name","segment","del_new","ob","collbTotalData","undefined","sucess","setItem","message","saveTableData","actionSaveDFUTable","forEach","actionUpdatePlotData","body","excludedColumns","Dates","actionAppendDFUTableData","actionExportDfuTable","rowIndex","splice","indexOf","undoCellEditing","redoCellEditing","handleFilter"],"sourceRoot":""}